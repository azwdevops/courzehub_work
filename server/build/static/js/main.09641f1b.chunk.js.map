{"version":3,"sources":["shared/PrivateRoute.js","shared/scripts.js","shared/sharedFunctions.js","components/common/MinDialog.js","redux/actions/types.js","shared/globals.js","shared/axios.js","api/postapi.js","redux/actions/shared.js","redux/actions/auth.js","api/patchapi.js","api/getapi.js","components/users/Login.js","components/common/MediumDialog.js","components/users/Signup.js","components/users/ForgotPassword.js","components/users/ReactivateAccount.js","components/common/Header/Header.js","pages/Home/Home.js","components/common/Links/SysAdminLinks.js","components/common/Links/OrganizationAdminLinks.js","components/common/Links/WorkerLinks.js","components/common/Sidebar/Sidebar.js","pages/Dashboard/Dashboard.js","pages/ActivateAccount/ActivateAccount.js","pages/ResetPasswordConfirm.js","pages/NotFound/NotFound.js","components/users/ChangePassword.js","components/common/Markdown/Toolbar.js","components/common/Markdown/Markdown.js","redux/actions/work.js","pages/worker/components/WorkerApplication.js","pages/Profile/Profile.js","pages/systemAdmin/MaintainOrganizations/components/AddOrganization.js","pages/systemAdmin/MaintainOrganizations/components/AddOrganizationAdmin.js","pages/systemAdmin/MaintainOrganizations/MaintainOrganizations.js","pages/organizationAdmin/Tasks/components/AddTask.js","pages/organizationAdmin/Tasks/components/EditTask.js","components/common/MaxDialog.js","pages/organizationAdmin/Tasks/components/RateWork.js","pages/organizationAdmin/Tasks/components/TaskSubmissions.js","pages/organizationAdmin/Tasks/MaintainTasks.js","pages/systemAdmin/MaintainWorkers/components/EditWorkerApplication.js","pages/systemAdmin/MaintainWorkers/components/EditWorker.js","pages/systemAdmin/MaintainWorkers/MaintainWorkers.js","pages/worker/components/TasksAvailable/components/Instructions.js","pages/worker/components/TasksAvailable/TasksAvailable.js","pages/worker/components/TasksOngoing/TasksOngoing.js","pages/worker/components/TasksSubmitted/components/ReviewNotes.js","pages/worker/components/TasksSubmitted/TasksSubmitted.js","pages/worker/WorkCenter/WorkCenter.js","App.js","reportWebVitals.js","redux/reducers/auth.js","redux/reducers/shared.js","redux/utility.js","redux/reducers/work.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["PrivateRoute","localStorage","getItem","to","showNavbar","nav","document","getElementById","bodypd","classList","toggle","ifEmpty","object","i","resetFormValues","MinDialog","props","Dialog","open","isOpen","maxWidth","style","margin","fullWidth","children","OPEN_SIGNUP","CLOSE_SIGNUP","OPEN_LOGIN","CLOSE_LOGIN","AUTH_SUCCESS","LOGOUT","OPEN_FORGOT_PASSWORD","CLOSE_FORGOT_PASSWORD","OPEN_RESEND_ACTIVATION","CLOSE_RESEND_ACTIVATION","OPEN_PASSWORD_RESET_CONFIRM","CLOSE_PASSWORD_RESET_CONFIRM","OPEN_CHANGE_PASSWORD","CLOSE_CHANGE_PASSWORD","SET_ALERT","REMOVE_ALERT","START_LOADING","STOP_LOADING","ADD_ORGANIZATION","GET_ORGANIZATIONS","UPDATE_ORGANIZATION","NEW_ORGANIZATION_TASK","GET_TASKS","EDIT_ORGANIZATION_TASK","GET_WORKERS","EDIT_WORKER","globals","success","error","fillFields","unknown_error","dev","liveProduction","devHome","productionHome","URL","API","axios","create","baseURL","interceptors","request","use","req","headers","Authorization","Accept","showError","err","response","status","window","alert","data","detail","stopLoading","dispatch","type","signup_user","newUser","resetForm","async","post","api","then","res","catch","finally","activate_account","body","activation_token","navigate","actionTypes","replace","resend_activation","email","login","loginData","setItem","access","get_user","reset_password","set_password","newPasswords","password_token","update_user","updatedUser","userId","patch","payload","user","change_password","passwords","logout","get","clear","connect","state","loading","shared","loginForm","auth","startLoading","loginUser","closeLogin","openPasswordReset","openSignup","openResendActivation","setLoginData","useState","password","handleChange","e","target","name","value","className","id","htmlFor","onChange","CircularProgress","position","marginLeft","onClick","preventDefault","justifySelf","MediumDialog","signupForm","closeSignup","signupUser","setNewUser","first_name","last_name","username","confirm_password","required","forgotPasswordForm","resetPassword","closeForgotPassword","setEmail","trim","resendActivationForm","closeResendActivation","resendActivation","Header","useDispatch","useNavigate","session_cookie","useSelector","userImage","Avatar","alt","src","charAt","profile_type","SysAdminLinks","Link","pathname","OrganizationAdminLinks","WorkerLinks","loggedIn","logoutUser","useLocation","class","Dashboard","activateUser","history","useParams","resetPasswordConfirmForm","setNewPassword","openNewPassword","closeNewPassword","newAlert","setNewPasswords","new_password","alertType","NotFound","changePasswordForm","changeUserPassword","closeChangePassword","setPasswords","current_password","confirm_new_password","Toolbar","format","com","val","execCommand","Markdown","content","setContent","html","add_organization","organization_data","get_organizations","organizations_data","add_or_remove_organization_admin","updated_organization","new_organization_task","new_task","location","taskId","taskAmount","merchant_ref","get_all_tasks","tasks_data","edit_organization_task","updated_task","worker_application","get_workers","edit_worker_or_application","updated_application","workerApplication","openWorkerApplication","setOpenWorkerApplication","description","setDescription","applicationDetails","setApplicationDetails","mpesa_number","national_id","occupation","onSubmit","about_worker","bio","has_applied_as_worker","updateUser","openChangePassword","setUpdatedUser","useEffect","addOrganization","openAddOrganization","setOpenAddOrganization","newOrganization","setNewOrganization","initials","addOrganizationAdmin","openAddOrganizationAdmin","organizationId","setOpenAddOrganizationAdmin","userEmail","setUserEmail","actionType","organizations","work","getOrganizations","removeOrganizationAdmin","currentOrganizationId","setCurrentOrganizationId","length","map","organization","index","organization_admin_email","title","deleteOrganizationAdmin","confirm","openAddOrganizationAdminForm","newOrganizationTask","openAddTask","setOpenAddTask","newTask","setNewTask","user_minimum_rating","attachment","amount","instructions","setInstructions","formData","FormData","append","min","step","max","disabled","selected","files","editOrganization","openEditTask","currentTask","setCurrentTask","setOpenEditTask","MaxDialog","RateWork","openWorkRating","currentTaskSubmissionId","taskSubmissions","setOpenWorkRating","setTaskSubmissions","workRating","setWorkRating","submission_rating","review_notes","submission_status","url","filter","task_submission","rated_submission","postData","openTaskSubmissions","currentTaskId","setOpenTaskSubmissions","currentTaskSubmission","setCurrentTaskSubmission","task_submissions","fetchData","task","moment","submitted_on","openWorkRatingForm","taskSubmission","organizationTasks","organization_tasks","getAllTasks","openEditTaskForm","payment_status","href","Math","floor","random","pesapal","pesapal_transaction","pesapal_merchant_reference","pesapal_transaction_tracking_id","openTaskSubmissionsForm","editWorkerOrApplication","openEditWorkerApplication","currentWorkerApplication","setOpenEditWorkerApplication","setCurrentWorkerApplication","full_name","applied_on","rejection_reason","applicationId","worker_or_application","readOnly","openEditWorker","currentWorker","setOpenEditWorker","setCurrentWorker","profile_status","disabled_notes","suspension_notes","workerId","workers","workers_applications","getWorkers","worker","openEditWorkerForm","openEditWorkerApplicationForm","Instructions","openInstructions","setOpenInstructions","parse","openTasksAvailable","setOpenTasksAvailable","availableTasks","setAvailableTasks","checkTasks","setCheckTasks","available_tasks","handleOpenInstructions","acceptTask","openTasksOngoing","setOpenTasksOngoing","ongoingTasks","setOngoingTasks","taskAttachment","setTaskAttachment","ongoing_tasks","handleFileChange","ongoing_task","taken_on","handleSubmit","taskSubmissionId","handleReturnTask","ReviewNotes","openReviewNotes","setOpenReviewNotes","currentReviewNotes","openTasksSubmitted","setOpenTasksSubmitted","submittedTasks","setSubmittedTasks","setCurrentReviewNotes","submitted_tasks","submitted_task","openReviewNotesForm","review","WorkCenter","getUser","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","authReducer","action","sharedInitialState","sharedReducer","updateObject","oldObject","updatedProperties","updateOrganization","editOrganizationTask","console","log","action_type","worker_data","workReducer","combineReducers","store","createStore","reducers","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.09641f1b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navigate, Outlet } from \"react-router-dom\";\r\n\r\nconst PrivateRoute = () => {\r\n  return localStorage.getItem(\"session_cookie\") ? (\r\n    <Outlet />\r\n  ) : (\r\n    <Navigate to=\"/\" />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","// toggle sidebar on menu button click\r\nexport const showNavbar = () => {\r\n  // const toggle = document.getElementById(\"header-toggle\")\r\n  const nav = document.getElementById(\"nav-bar\"),\r\n    bodypd = document.getElementById(\"body-pd\");\r\n  // headerpd = document.getElementById(\"header\");\r\n\r\n  // show navbar\r\n  nav.classList.toggle(\"show\");\r\n\r\n  // change icon\r\n  // toggle.classList.toggle(\"bx-x\");\r\n\r\n  // add padding to body\r\n  bodypd.classList.toggle(\"body-pd\");\r\n\r\n  // add padding to header\r\n  //   headerpd.classList.toggle(\"body-pd\");\r\n};\r\n","// check if any field in an object is empty\r\nexport const ifEmpty = (object) => {\r\n  for (const i in object) {\r\n    if (`${object[i]}` === \"\") {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n// function to reset form values to blank\r\nexport const resetFormValues = (object) => {\r\n  for (const i in object) {\r\n    object[i] = \"\";\r\n  }\r\n};\r\n\r\n// function to get max date to display on user entry form\r\nexport const maxDate = () => {\r\n  const today = new Date();\r\n  const day = today.getDate() < 10 ? \"0\" + today.getDate() : today.getDate();\r\n  const month =\r\n    today.getMonth() + 1 < 10\r\n      ? \"0\" + (today.getMonth() + 1)\r\n      : today.getMonth() + 1;\r\n  const max_date = today.getFullYear() + \"-\" + month + \"-\" + day;\r\n  return max_date;\r\n};\r\n\r\n// function to get min date to display on exam date\r\nexport const minDate = () => {\r\n  const today = new Date();\r\n  const day = today.getDate() < 10 ? \"0\" + today.getDate() : today.getDate();\r\n  const month =\r\n    today.getMonth() + 1 < 10\r\n      ? \"0\" + (today.getMonth() + 1)\r\n      : today.getMonth() + 1;\r\n  const min_date = today.getFullYear() + \"-\" + month + \"-\" + day;\r\n  return min_date;\r\n};\r\n","// material ui items\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nconst MinDialog = (props) => {\r\n  return (\r\n    <Dialog\r\n      open={props?.isOpen}\r\n      maxWidth=\"sm\"\r\n      style={{ maxWidth: props?.maxWidth, margin: \"auto\" }}\r\n      fullWidth\r\n    >\r\n      {props.children}\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default MinDialog;\r\n","// user types\r\nexport const OPEN_SIGNUP = \"OPEN_SIGNUP\";\r\nexport const CLOSE_SIGNUP = \"CLOSE_SIGNUP\";\r\nexport const OPEN_LOGIN = \"OPEN_LOGIN\";\r\nexport const CLOSE_LOGIN = \"CLOSE_LOGIN\";\r\nexport const AUTH_SUCCESS = \"AUTH_SUCCESS\";\r\nexport const LOGOUT = \"LOGOUT\";\r\nexport const OPEN_FORGOT_PASSWORD = \"OPEN_FORGOT_PASSWORD\";\r\nexport const CLOSE_FORGOT_PASSWORD = \"CLOSE_FORGOT_PASSWORD\";\r\nexport const OPEN_RESEND_ACTIVATION = \"OPEN_RESEND_ACTIVATION\";\r\nexport const CLOSE_RESEND_ACTIVATION = \"CLOSE_RESEND_ACTIVATION\";\r\nexport const OPEN_PASSWORD_RESET_CONFIRM = \"OPEN_PASSWORD_RESET_CONFIRM\";\r\nexport const CLOSE_PASSWORD_RESET_CONFIRM = \"CLOSE_PASSWORD_RESET_CONFIRM\";\r\nexport const OPEN_CHANGE_PASSWORD = \"OPEN_CHANGE_PASSWORD\";\r\nexport const CLOSE_CHANGE_PASSWORD = \"CLOSE_CHANGE_PASSWORD\";\r\n\r\n// shared types\r\nexport const SET_ALERT = \"SET_ALERT\";\r\nexport const REMOVE_ALERT = \"REMOVE_ALERT\";\r\nexport const START_LOADING = \"START_LOADING\";\r\nexport const STOP_LOADING = \"STOP_LOADING\";\r\n\r\n// work types\r\nexport const ADD_ORGANIZATION = \"ADD_ORGANIZATION\";\r\nexport const GET_ORGANIZATIONS = \"GET_ORGANIZATIONS\";\r\nexport const UPDATE_ORGANIZATION = \"UPDATE_ORGANIZATION\";\r\nexport const NEW_ORGANIZATION_TASK = \"NEW_ORGANIZATION_TASK\";\r\nexport const GET_TASKS = \"GET_TASKS\";\r\nexport const EDIT_ORGANIZATION_TASK = \"EDIT_ORGANIZATION_TASK\";\r\nexport const GET_WORKERS = \"GET_WORKERS\";\r\nexport const EDIT_WORKER = \"EDIT_WORKER\";\r\n","const globals = {\r\n  success: \"success\",\r\n  error: \"error\",\r\n  fillFields: \"Please fill all fields\",\r\n  unknown_error: \"An unknown error occurred, please try again later\",\r\n  dev: false,\r\n  liveProduction: true, // for work.courzehub.com domain\r\n  devHome: \"http://localhost:8000\", // for local development\r\n  productionHome: \"https://work.azwgroup.com\", // for live production\r\n};\r\nexport default globals;\r\n","import axios from \"axios\";\r\nimport globals from \"./globals\";\r\n\r\nconst { liveProduction, devHome, productionHome } = globals;\r\n\r\nlet URL;\r\n\r\nif (liveProduction) {\r\n  URL = productionHome;\r\n} else {\r\n  URL = devHome;\r\n}\r\n\r\nconst API = axios.create({ baseURL: URL });\r\n\r\nAPI.interceptors.request.use((req) => {\r\n  if (localStorage.getItem(\"session_cookie\")) {\r\n    req.headers.Authorization = `Bearer ${localStorage.getItem(\r\n      \"session_cookie\"\r\n    )}`;\r\n    req.headers.Accept = \"application/json\";\r\n  }\r\n  return req;\r\n});\r\n\r\nexport default API;\r\n","import API from \"../shared/axios\";\r\n\r\n// user routes\r\n\r\n// signup\r\nexport const signupUser = (newUser) => API.post(\"/api/user/signup/\", newUser);\r\n// activate user account\r\nexport const activateAccount = (activation_token) =>\r\n  API.post(\"/api/user/activate-user-account/\", { activation_token });\r\n\r\n// resend account activation email\r\nexport const resendActivation = (email) =>\r\n  API.post(\"/api/user/resend-account-activation-link/\", { email });\r\n\r\n// sign in user\r\nexport const signIn = (loginData) => API.post(\"/api/user/login/\", loginData);\r\n\r\n// send password reset email\r\nexport const resetPassword = (email) =>\r\n  API.post(\"/api/user/user-request-password-reset/\", { email });\r\n\r\n// set new password using reset link sent from above\r\nexport const setPassword = (newPasswords, password_token) =>\r\n  API.post(\"/api/user/user-set-new-password/\", {\r\n    ...newPasswords,\r\n    password_token,\r\n  });\r\n\r\n// user change password\r\nexport const changePassword = (passwords, userId) =>\r\n  API.post(`/api/user/change-user-password/${userId}/`, passwords);\r\n\r\n// WORK API\r\nexport const addOrganization = (userId, body) =>\r\n  API.post(`/api/work/maintain-organizations/${userId}/`, body);\r\n\r\n// organization admin create task API\r\nexport const newOrganizationTask = (userId, body) =>\r\n  API.post(`/api/work/maintain-organization-tasks/${userId}/`, body);\r\n\r\n// worker application\r\nexport const workerApplication = (userId, body) =>\r\n  API.post(`/api/work/worker-application/${userId}/`, body);\r\n","import { SET_ALERT, REMOVE_ALERT, STOP_LOADING } from \"./types\";\r\nimport globals from \"../../shared/globals\";\r\n\r\nconst { unknown_error } = globals;\r\n\r\n// START OF reusable functions\r\n// show error function\r\nexport const showError = (err) => {\r\n  if (\r\n    err?.response?.status === 400 ||\r\n    err?.response?.status === 401 ||\r\n    err?.response?.status === 403\r\n  ) {\r\n    window.alert(err?.response?.data?.detail);\r\n  } else if (err?.response?.status === 413) {\r\n    window.alert(\"Video file too large, a maximum of 95MB allowed.\");\r\n  } else {\r\n    window.alert(unknown_error);\r\n  }\r\n};\r\nexport const stopLoading = (dispatch) => {\r\n  dispatch({ type: STOP_LOADING });\r\n};\r\n\r\n// END OF REUSABLE FUNCTIONS\r\n","// axios items\r\nimport * as api from \"../../api/index\";\r\n\r\n// redux API items\r\n\r\nimport * as actionTypes from \"../actions/types\";\r\nimport { showError, stopLoading } from \"./shared\";\r\n// shared items\r\nimport globals from \"../../shared/globals\";\r\n\r\nconst { success, unknown_error } = globals;\r\n\r\n// sign up user\r\nexport const signup_user = (newUser, resetForm) => async (dispatch) => {\r\n  await api\r\n    .signupUser(newUser)\r\n    .then((res) => {\r\n      // dispatch({ type: AUTH_SUCCESS, payload: data?.user });\r\n      window.alert(res.data?.detail);\r\n      resetForm();\r\n    })\r\n    .catch((err) => showError(err))\r\n    .finally(() => stopLoading(dispatch));\r\n};\r\n\r\n// activate user account\r\nexport const activate_account = (body) => async (dispatch) => {\r\n  const { activation_token, navigate } = body;\r\n  await api\r\n    .activateAccount(activation_token)\r\n    .then((res) => {\r\n      alert(res.data?.detail);\r\n      dispatch({ type: actionTypes.OPEN_LOGIN });\r\n    })\r\n    .catch((err) => {\r\n      if (err.response.status === 400) {\r\n        window.alert(err.response.data?.detail);\r\n        // if token has expired or is invalid, open this form for user to request a new token\r\n        dispatch({ type: actionTypes.OPEN_RESEND_ACTIVATION });\r\n      } else {\r\n        window.alert(unknown_error);\r\n      }\r\n    })\r\n    .finally(() => {\r\n      dispatch({ type: actionTypes.STOP_LOADING });\r\n      navigate(\"/\", { replace: true });\r\n    });\r\n};\r\n\r\n// resend user account activation link\r\nexport const resend_activation = (email, resetForm) => async (dispatch) => {\r\n  await api\r\n    .resendActivation(email)\r\n    .then((res) => {\r\n      window.alert(res.data?.detail);\r\n      resetForm();\r\n    })\r\n    .catch((err) => showError(err))\r\n    .finally(() => stopLoading(dispatch));\r\n};\r\n\r\n// login user\r\nexport const login = (loginData, resetForm) => async (dispatch) => {\r\n  await api\r\n    .signIn(loginData)\r\n    .then((res) => {\r\n      localStorage.setItem(\"session_cookie\", res.data?.access);\r\n      resetForm();\r\n      // dispatch success message\r\n      dispatch({ type: actionTypes.CLOSE_LOGIN });\r\n      // get user details\r\n      dispatch(get_user());\r\n    })\r\n    .catch((err) => showError(err))\r\n    .finally(() => stopLoading(dispatch));\r\n};\r\n\r\n// reset user password by sending an email with a reset link\r\nexport const reset_password = (email, resetForm) => async (dispatch) => {\r\n  await api\r\n    .resetPassword(email)\r\n    .then((res) => {\r\n      window.alert(res.data?.detail);\r\n      resetForm();\r\n    })\r\n    .catch((err) => showError(err))\r\n    .finally(() => stopLoading(dispatch));\r\n};\r\n\r\n// set new user password\r\nexport const set_password =\r\n  (newPasswords, password_token, navigate) => async (dispatch) => {\r\n    await api\r\n      .setPassword(newPasswords, password_token)\r\n      .then((res) => {\r\n        alert(res.data?.detail);\r\n        dispatch({ type: actionTypes.CLOSE_PASSWORD_RESET_CONFIRM });\r\n        navigate(\"/\", { replace: true });\r\n        dispatch({ type: actionTypes.OPEN_LOGIN });\r\n      })\r\n      .catch((err) => showError(err))\r\n      .finally(() => stopLoading(dispatch));\r\n  };\r\n\r\n// patch/update user data\r\nexport const update_user = (updatedUser, userId) => async (dispatch) => {\r\n  await api\r\n    .updateUser(updatedUser, userId)\r\n    .then((res) => {\r\n      dispatch({ type: actionTypes.AUTH_SUCCESS, payload: res.data?.user });\r\n      alert(res.data?.detail);\r\n    })\r\n    .catch((err) => showError(err))\r\n    .finally(() => stopLoading(dispatch));\r\n};\r\n\r\n// user change password\r\nexport const change_password =\r\n  (passwords, userId, navigate) => async (dispatch) => {\r\n    await api\r\n      .changePassword(passwords, userId)\r\n      .then((res) => {\r\n        window.alert(res.data?.detail);\r\n        dispatch({ type: actionTypes.CLOSE_CHANGE_PASSWORD });\r\n        dispatch(logout(navigate));\r\n        dispatch({ type: actionTypes.OPEN_LOGIN });\r\n      })\r\n      .catch((err) => showError(err))\r\n      .finally(() => stopLoading(dispatch));\r\n  };\r\n\r\n// get user data\r\nexport const get_user = () => async (dispatch) => {\r\n  await api\r\n    .getUser()\r\n    .then((res) => {\r\n      dispatch({ type: actionTypes.AUTH_SUCCESS, payload: res.data?.user });\r\n    })\r\n    .catch((err) => {\r\n      dispatch({ type: actionTypes.LOGOUT });\r\n      localStorage.clear();\r\n    });\r\n};\r\n\r\n// logout user\r\nexport const logout = (navigate) => async (dispatch) => {\r\n  localStorage.clear();\r\n  dispatch({ type: actionTypes.LOGOUT });\r\n  navigate(\"/\", { replace: true });\r\n};\r\n","import API from \"../shared/axios\";\r\n\r\n// patch user data\r\nexport const updateUser = (updatedUser, userId) =>\r\n  API.patch(`/api/user/update-user-details/${userId}/`, updatedUser);\r\n\r\n// WORK API's\r\nexport const addOrRemoveOrganizationAdmin = (userId, body) =>\r\n  API.patch(`/api/work/maintain-organizations/${userId}/`, body);\r\n\r\n// organization admin edit task API\r\nexport const editOrganizationTask = (userId, body) =>\r\n  API.patch(`/api/work/maintain-organization-tasks/${userId}/`, body);\r\n\r\n// system admin edit worker or application\r\nexport const editWorkerOrApplication = (userId, body) =>\r\n  API.patch(`/api/work/worker-application/${userId}/`, body);\r\n","import API from \"../shared/axios\";\r\n\r\n// get user data\r\nexport const getUser = () => API.get(\"/api/user/get-user-data/\");\r\n\r\n// WORK API's\r\n\r\nexport const getOrganizations = (userId) =>\r\n  API.get(`/api/work/maintain-organizations/${userId}/`);\r\n\r\n// get all tasks for organization\r\nexport const getAllTasks = (userId) =>\r\n  API.get(`/api/work/maintain-organization-tasks/${userId}/`);\r\n\r\n// get worker applications\r\nexport const getWorkers = (userId) =>\r\n  API.get(`/api/work/worker-application/${userId}/`);\r\n","// import installed packages\r\nimport { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// import styles\r\n\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import shared/global items\r\nimport { ifEmpty, resetFormValues } from \"../../shared/sharedFunctions\";\r\n// import components/pages\r\nimport MinDialog from \"../common/MinDialog\";\r\n\r\n// import redux API\r\nimport {\r\n  CLOSE_LOGIN,\r\n  OPEN_FORGOT_PASSWORD,\r\n  OPEN_RESEND_ACTIVATION,\r\n  OPEN_SIGNUP,\r\n  START_LOADING,\r\n} from \"../../redux/actions/types\";\r\nimport { login } from \"../../redux/actions/auth\";\r\n\r\nconst Login = (props) => {\r\n  const { loading, loginForm } = props; // extract state from props\r\n  const {\r\n    startLoading,\r\n    loginUser,\r\n    closeLogin,\r\n    openPasswordReset,\r\n    openSignup,\r\n    openResendActivation,\r\n  } = props; // extract dispatch action from props\r\n  const [loginData, setLoginData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  // destructuring\r\n  const { email, password } = loginData;\r\n\r\n  // reset form values\r\n  const resetForm = () => {\r\n    resetFormValues(loginData);\r\n  };\r\n\r\n  // function to close login form\r\n  const closeLoginForm = () => {\r\n    closeLogin();\r\n    resetForm();\r\n  };\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n    if (ifEmpty(loginData)) {\r\n      return window.alert(\"Email and password required\");\r\n    }\r\n    startLoading();\r\n    // call the signup action creator\r\n    loginUser(loginData, resetForm);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setLoginData({ ...loginData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // open password reset form\r\n  const openPasswordResetForm = () => {\r\n    openPasswordReset();\r\n    closeLogin();\r\n  };\r\n\r\n  //open sign up form\r\n  const openSignupForm = () => {\r\n    openSignup();\r\n    closeLogin();\r\n  };\r\n  // open resend activation\r\n  const openResendActivationForm = () => {\r\n    openResendActivation();\r\n    closeLogin();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <MinDialog isOpen={loginForm} maxWidth=\"500px\">\r\n        <form className=\"dialog\" id={loading ? \"formSubmitting\" : \"\"}>\r\n          <h3>Login here</h3>\r\n          <div className=\"dialog__rowSingleItem\">\r\n            <label htmlFor=\"\">Email</label>\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              onChange={handleChange}\r\n              value={email}\r\n            />\r\n          </div>\r\n          {loading && (\r\n            <CircularProgress\r\n              style={{ position: \"absolute\", marginLeft: \"40%\" }}\r\n            />\r\n          )}\r\n          <div className=\"dialog__rowSingleItem\">\r\n            <label htmlFor=\"\">Password</label>\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              onChange={handleChange}\r\n              value={password}\r\n            />\r\n          </div>\r\n          <div className=\"form__Buttons\">\r\n            <button type=\"button\" onClick={closeLoginForm}>\r\n              Close\r\n            </button>\r\n            <button type=\"submit\" onClick={handleLogin}>\r\n              Login\r\n            </button>\r\n          </div>\r\n          <div className=\"extra__formButtons\">\r\n            <label\r\n              htmlFor=\"\"\r\n              className=\"button\"\r\n              onClick={openPasswordResetForm}\r\n            >\r\n              Forgot Password\r\n            </label>\r\n            <label\r\n              htmlFor=\"\"\r\n              className=\"button\"\r\n              style={{ justifySelf: \"end\" }}\r\n              onClick={openSignupForm}\r\n            >\r\n              Create Account\r\n            </label>\r\n          </div>\r\n          <div className=\"extra__formButtons\">\r\n            <label\r\n              htmlFor=\"\"\r\n              className=\"button\"\r\n              onClick={openResendActivationForm}\r\n            >\r\n              Resend Activation\r\n            </label>\r\n          </div>\r\n        </form>\r\n      </MinDialog>\r\n      {/* components */}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.shared?.loading,\r\n    loginForm: state.auth.loginForm,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    loginUser: (loginData, resetForm) => dispatch(login(loginData, resetForm)),\r\n    closeLogin: () => dispatch({ type: CLOSE_LOGIN }),\r\n    openPasswordReset: () => dispatch({ type: OPEN_FORGOT_PASSWORD }),\r\n    openSignup: () => dispatch({ type: OPEN_SIGNUP }),\r\n    openResendActivation: () => dispatch({ type: OPEN_RESEND_ACTIVATION }),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","// material ui items\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nconst MediumDialog = (props) => {\r\n  return (\r\n    <Dialog\r\n      open={props?.isOpen}\r\n      maxWidth=\"md\"\r\n      style={{ maxWidth: props?.maxWidth, margin: \"auto\" }}\r\n      fullWidth\r\n    >\r\n      {props.children}\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default MediumDialog;\r\n","// import installed packages\r\nimport { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import styles\r\n\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import shared/global items\r\nimport globals from \"../../shared/globals\";\r\nimport { ifEmpty, resetFormValues } from \"../../shared/sharedFunctions\";\r\n// import components/pages\r\nimport MediumDialog from \"../common/MediumDialog\";\r\n// import redux API\r\nimport { CLOSE_SIGNUP, START_LOADING } from \"../../redux/actions/types\";\r\nimport { signup_user } from \"../../redux/actions/auth\";\r\n\r\nconst Signup = (props) => {\r\n  const { loading, signupForm } = props; // get state from props\r\n  const { startLoading, closeSignup, signupUser } = props; // get dispatch actions from props\r\n\r\n  // internal state\r\n  const [newUser, setNewUser] = useState({\r\n    first_name: \"\",\r\n    last_name: \"\",\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirm_password: \"\",\r\n  });\r\n\r\n  //############### destructuring code ###################//\r\n  const { first_name, last_name, username, email, password, confirm_password } =\r\n    newUser;\r\n  const { error, fillFields } = globals;\r\n\r\n  //#################end of destructuring ###########//\r\n\r\n  const resetForm = () => {\r\n    resetFormValues(newUser);\r\n  };\r\n\r\n  const closeSignupForm = () => {\r\n    closeSignup();\r\n    resetForm();\r\n  };\r\n\r\n  const handleSignup = (e) => {\r\n    e.preventDefault();\r\n    if (ifEmpty(newUser)) {\r\n      return window.alert(fillFields);\r\n    }\r\n    // confirm passwords match\r\n    if (password !== confirm_password) {\r\n      return window.alert(\"Passwords should match\");\r\n    }\r\n\r\n    // dispatch the loading action\r\n    startLoading();\r\n\r\n    // call the signup action creator\r\n    signupUser(newUser, resetForm);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setNewUser({ ...newUser, [e.target.name]: e.target.value });\r\n  };\r\n  return (\r\n    <MediumDialog isOpen={signupForm} maxWidth=\"800px\">\r\n      <form className=\"dialog\" id={loading ? \"formSubmitting\" : \"\"}>\r\n        <h3>Create new account</h3>\r\n        <div className=\"dialog__row\">\r\n          <span>\r\n            <label htmlFor=\"\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"first_name\"\r\n              value={first_name}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </span>\r\n          <span>\r\n            <label htmlFor=\"\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"last_name\"\r\n              value={last_name}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </span>\r\n        </div>\r\n        {loading && (\r\n          <CircularProgress\r\n            style={{ position: \"absolute\", marginLeft: \"43%\" }}\r\n          />\r\n        )}\r\n        <div className=\"dialog__row\">\r\n          <span>\r\n            <label htmlFor=\"\">Username</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"username\"\r\n              value={username}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </span>\r\n          <span>\r\n            <label htmlFor=\"\">Email</label>\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              username={email}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"dialog__row\">\r\n          <span>\r\n            <label htmlFor=\"\" className=\"label__left\">\r\n              Password\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </span>\r\n          <span>\r\n            <label htmlFor=\"\">Confirm Password</label>\r\n            <input\r\n              type=\"password\"\r\n              name=\"confirm_password\"\r\n              value={confirm_password}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </span>\r\n        </div>\r\n        <div className=\"form__Buttons\">\r\n          <button type=\"button\" onClick={closeSignupForm}>\r\n            Close\r\n          </button>\r\n          <button type=\"submit\" onClick={handleSignup}>\r\n            Sign Up\r\n          </button>\r\n        </div>\r\n        <div className=\"extra__formButtons\"></div>\r\n      </form>\r\n    </MediumDialog>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    signupForm: state.auth.signupForm,\r\n    loading: state.shared?.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    closeSignup: () => dispatch({ type: CLOSE_SIGNUP }),\r\n    signupUser: (newUser, resetForm) =>\r\n      dispatch(signup_user(newUser, resetForm)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Signup);\r\n","// import installed packages\r\nimport { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import styles\r\n\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\n// import shared/global items\r\n\r\n// import components/pages\r\nimport MinDialog from \"../common/MinDialog\";\r\n\r\n// import redux API\r\nimport {\r\n  CLOSE_FORGOT_PASSWORD,\r\n  START_LOADING,\r\n} from \"../../redux/actions/types\";\r\nimport { reset_password } from \"../../redux/actions/auth\";\r\n\r\nconst ForgotPassword = (props) => {\r\n  const { loading, forgotPasswordForm } = props; // extract state from props\r\n  const { startLoading, resetPassword, closeForgotPassword } = props; // extract dispatch actions from props\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n\r\n  //############### destructuring code ###################//\r\n\r\n  //#################end of destructuring ###########//\r\n\r\n  const resetForm = () => {\r\n    setEmail(\"\");\r\n  };\r\n\r\n  const closeForgotPasswordForm = () => {\r\n    closeForgotPassword();\r\n    resetForm();\r\n  };\r\n\r\n  // function to reset password (send reset password email)\r\n\r\n  const sendPasswordResetEmail = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (email.trim() === \"\") {\r\n      return window.alert(\"Email required\");\r\n    }\r\n    startLoading();\r\n    // call the signup action creator\r\n    resetPassword(email, resetForm);\r\n  };\r\n\r\n  return (\r\n    <MinDialog isOpen={forgotPasswordForm} maxWidth=\"500px\">\r\n      <form className=\"dialog\" id={loading ? \"formSubmitting\" : \"\"}>\r\n        <h3>Enter your email to reset password</h3>\r\n        {loading && (\r\n          <CircularProgress\r\n            style={{ position: \"absolute\", marginLeft: \"40%\" }}\r\n          />\r\n        )}\r\n        <div className=\"dialog__rowSingleItem\">\r\n          <label htmlFor=\"\">Email</label>\r\n          <input\r\n            type=\"email\"\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            value={email}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form__Buttons\">\r\n          <button type=\"button\" onClick={closeForgotPasswordForm}>\r\n            Close\r\n          </button>\r\n          <button type=\"submit\" onClick={sendPasswordResetEmail}>\r\n            Reset\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </MinDialog>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.shared?.loading,\r\n    forgotPasswordForm: state.auth?.forgotPasswordForm,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    resetPassword: (email, resetForm) =>\r\n      dispatch(reset_password(email, resetForm)),\r\n    closeForgotPassword: () => dispatch({ type: CLOSE_FORGOT_PASSWORD }),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ForgotPassword);\r\n","// import installed packages\r\nimport { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import styles\r\n\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import shared/global items\r\n\r\n// import components/pages\r\nimport MinDialog from \"../common/MinDialog\";\r\n\r\n// import redux API\r\n\r\nimport {\r\n  CLOSE_RESEND_ACTIVATION,\r\n  START_LOADING,\r\n} from \"../../redux/actions/types\";\r\nimport { resend_activation } from \"../../redux/actions/auth\";\r\n\r\nconst ReactivateAccount = (props) => {\r\n  const { loading, resendActivationForm } = props; // extract state from props\r\n  const { startLoading, closeResendActivation, resendActivation } = props; // extract dispatch actions from props\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n\r\n  // ###################### destructuring to make code organized ######################### //\r\n  // ###################### end destructuring to make code organized ######################### //\r\n\r\n  const resetForm = () => {\r\n    setEmail(\"\");\r\n  };\r\n\r\n  const closeResendActivationForm = () => {\r\n    closeResendActivation();\r\n    resetForm();\r\n  };\r\n\r\n  // function to resend confirmation link\r\n  const resendAccountConfirmationLink = (e) => {\r\n    e.preventDefault();\r\n    if (email.trim() === \"\") {\r\n      return window.alert(\"Email required\");\r\n    }\r\n    startLoading();\r\n    // call the signup action creator\r\n    resendActivation(email, resetForm);\r\n  };\r\n\r\n  return (\r\n    <MinDialog\r\n      isOpen={resendActivationForm} // since the styles of min width applied globally is affecting the reactivate form width, apply inline styles\r\n      maxWidth=\"500px\"\r\n    >\r\n      <form className=\"dialog\" id={loading ? \"formSubmitting\" : \"\"}>\r\n        <h3>Enter email to resend confirmation link</h3>\r\n        {loading && (\r\n          <CircularProgress\r\n            style={{ position: \"absolute\", marginLeft: \"40%\" }}\r\n          />\r\n        )}\r\n        <div className=\"dialog__rowSingleItem\">\r\n          <label htmlFor=\"\">Email</label>\r\n          <input\r\n            type=\"email\"\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            value={email}\r\n            required\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form__Buttons\">\r\n          <button type=\"button\" onClick={closeResendActivationForm}>\r\n            Close\r\n          </button>\r\n          <button type=\"submit\" onClick={resendAccountConfirmationLink}>\r\n            Send\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </MinDialog>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.shared?.loading,\r\n    resendActivationForm: state.auth?.resendActivationForm,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    closeResendActivation: () => dispatch({ type: CLOSE_RESEND_ACTIVATION }),\r\n    resendActivation: (email, resetForm) =>\r\n      dispatch(resend_activation(email, resetForm)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReactivateAccount);\r\n","// import installed packages\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n// import styles\r\n\r\nimport \"./Header.scss\";\r\n// import material ui items\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n// import shared/global items\r\nimport { showNavbar } from \"../../../shared/scripts\";\r\n// import components/pages\r\nimport Login from \"../../users/Login\";\r\nimport Signup from \"../../users/Signup\";\r\nimport ForgotPassword from \"../../users/ForgotPassword\";\r\nimport ReactivateAccount from \"../../users/ReactivateAccount\";\r\n\r\n// import redux API\r\nimport { OPEN_LOGIN, OPEN_SIGNUP } from \"../../../redux/actions/types\";\r\nimport { logout } from \"../../../redux/actions/auth\";\r\n\r\nconst Header = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const session_cookie = localStorage.getItem(\"session_cookie\");\r\n  const username = useSelector((state) => state.auth.user?.username);\r\n  const userImage = useSelector((state) => state.auth?.userImage);\r\n\r\n  // console.log(location.pathname);\r\n\r\n  return (\r\n    <>\r\n      <header className=\"header\" id=\"header\">\r\n        <div className=\"header__toggle\">\r\n          <i className=\"bx bx-menu\" id=\"header-toggle\" onClick={showNavbar}></i>\r\n          <h1>\r\n            <Link to=\"/\">CourZe Hub Work</Link>\r\n          </h1>\r\n        </div>\r\n\r\n        {session_cookie ? (\r\n          <div className=\"header__right authenticated\">\r\n            <>\r\n              <div>\r\n                <Avatar alt={username} src={userImage} className=\"user__image\">\r\n                  {username?.charAt(0)}\r\n                </Avatar>\r\n                <h6>{username}</h6>\r\n                <i className=\"bx bx-caret-down\"></i>\r\n              </div>\r\n              <ul className=\"dropdown\">\r\n                <li>\r\n                  <Link to=\"/dashboard/\">Dashboard</Link>\r\n                </li>\r\n                <li onClick={() => dispatch(logout(navigate))}>Logout</li>\r\n              </ul>\r\n            </>\r\n          </div>\r\n        ) : (\r\n          <div className=\"header__right\">\r\n            <span\r\n              className=\"button\"\r\n              onClick={() => dispatch({ type: OPEN_LOGIN })}\r\n            >\r\n              Login\r\n            </span>\r\n            <span\r\n              className=\"button\"\r\n              onClick={() => dispatch({ type: OPEN_SIGNUP })}\r\n            >\r\n              Signup\r\n            </span>\r\n          </div>\r\n        )}\r\n      </header>\r\n      {/* components */}\r\n      <Login />\r\n      <Signup />\r\n      <ForgotPassword />\r\n      <ReactivateAccount />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","// import installed packages\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n// import styles\r\nimport \"./Home.scss\";\r\n// import material ui items\r\n// import shared/global items\r\n// import components/pages\r\n// import redux API\r\nimport { OPEN_LOGIN } from \"../../redux/actions/types\";\r\n\r\nconst Home = (props) => {\r\n  const { userId, profile_type } = props;\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const workerStartNow = () => {\r\n    if (userId) {\r\n      if (profile_type === \"Worker\") {\r\n        navigate(`/worker/work-center/`, { replace: true });\r\n      } else {\r\n        navigate(\"/profile\", { replace: true });\r\n      }\r\n    } else {\r\n      dispatch({ type: OPEN_LOGIN });\r\n    }\r\n  };\r\n\r\n  const companyGetStarted = () => {\r\n    if (userId) {\r\n      if (profile_type === \"Organization Admin\") {\r\n        navigate(`/organization-admin/maintain-tasks/`, { replace: true });\r\n      } else {\r\n        navigate(\"/profile\", { replace: true });\r\n      }\r\n    } else {\r\n      dispatch({ type: OPEN_LOGIN });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <div className=\"home__left\">\r\n        {(profile_type === \"Worker\" || !profile_type) && (\r\n          <>\r\n            <h3>Earn by using your skills.</h3>\r\n            <button\r\n              type=\"button\"\r\n              className=\"add__button\"\r\n              onClick={workerStartNow}\r\n            >\r\n              Start Now\r\n            </button>\r\n          </>\r\n        )}\r\n      </div>\r\n      <div className=\"home__right\">\r\n        {(profile_type === \"Organization Admin\" || !profile_type) && (\r\n          <>\r\n            <h3>Tap into remote talent.</h3>\r\n            <button\r\n              type=\"button\"\r\n              className=\"add__button\"\r\n              onClick={companyGetStarted}\r\n            >\r\n              Get Started\r\n            </button>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userId: state.auth.user?.id,\r\n    profile_type: state.auth.user?.profile_type,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","// import installed packages\r\n// import styles\r\n\r\n// import material ui items\r\n\r\n// import shared/global items\r\n\r\n// import components/pages\r\n\r\n// import redux API\r\n\r\nconst SysAdminLinks = ({ Link, pathname }) => {\r\n  return (\r\n    <>\r\n      <Link\r\n        to=\"/sys-admin/maintain-organizations/\"\r\n        className={\r\n          `${pathname}` === \"/sys-admin/maintain-organizations/\"\r\n            ? \"nav__link active\"\r\n            : \"nav__link\"\r\n        }\r\n      >\r\n        <i className=\"bx bxs-school\"></i>\r\n        <span className=\"nav__name\">Organizations</span>\r\n      </Link>\r\n      <Link\r\n        to=\"/sys-admin/maintain-workers/\"\r\n        className={\r\n          `${pathname}` === \"/sys-admin/maintain-workers/\"\r\n            ? \"nav__link active\"\r\n            : \"nav__link\"\r\n        }\r\n      >\r\n        <i className=\"fa fa-users\" aria-hidden=\"true\"></i>\r\n        <span className=\"nav__name\">Workers</span>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SysAdminLinks;\r\n","// import installed packages\r\n// import styles\r\n\r\n// import material ui items\r\n\r\n// import shared/global items\r\n\r\n// import components/pages\r\n\r\n// import redux API\r\n\r\nconst OrganizationAdminLinks = ({ Link, pathname }) => {\r\n  return (\r\n    <>\r\n      <Link\r\n        to=\"/organization-admin/maintain-tasks/\"\r\n        className={\r\n          `${pathname}` === \"/organization-admin/maintain-tasks/\"\r\n            ? \"nav__link active\"\r\n            : \"nav__link\"\r\n        }\r\n      >\r\n        <i className=\"fa fa-briefcase\" aria-hidden=\"true\"></i>\r\n        <span className=\"nav__name\">Tasks</span>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OrganizationAdminLinks;\r\n","// import installed packages\r\n// import styles\r\n// import material ui items\r\n// import shared/global items\r\n// import components/pages\r\n// import redux API\r\n\r\nconst WorkerLinks = ({ Link, pathname }) => {\r\n  return (\r\n    <>\r\n      <Link\r\n        to=\"/worker/work-center/\"\r\n        className={\r\n          `${pathname}` === \"/worker/work-center/\"\r\n            ? \"nav__link active\"\r\n            : \"nav__link\"\r\n        }\r\n      >\r\n        <i className=\"fa fa-briefcase\" aria-hidden=\"true\"></i>\r\n        <span className=\"nav__name\">Work Center</span>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WorkerLinks;\r\n","// import installed packages\r\nimport { Link, useNavigate, useLocation } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// import styles\r\nimport \"./Sidebar.scss\";\r\n// import material ui items\r\n\r\n// import shared/global items\r\n\r\n// import components/pages\r\nimport SysAdminLinks from \"../Links/SysAdminLinks\";\r\n// import redux API\r\nimport { logout } from \"../../../redux/actions/auth\";\r\nimport OrganizationAdminLinks from \"../Links/OrganizationAdminLinks\";\r\nimport WorkerLinks from \"../Links/WorkerLinks\";\r\n\r\nconst Sidebar = (props) => {\r\n  const navigate = useNavigate();\r\n  const { pathname } = useLocation();\r\n  const { loggedIn, profile_type } = props;\r\n  const { logoutUser } = props;\r\n\r\n  return (\r\n    <div className=\"left-navbar\" id=\"nav-bar\">\r\n      <nav className=\"nav\">\r\n        <Link to=\"\" className=\"nav__logo\">\r\n          <i className=\"bx bx-layer nav__logo-icon\"></i>\r\n          <span className=\"nav__logo-name\">AZW</span>\r\n        </Link>\r\n        <div className=\"nav__list\">\r\n          {/* unprotected links */}\r\n          <>\r\n            <Link\r\n              to=\"/\"\r\n              className={\r\n                `${pathname}` === \"/\" ? \"nav__link active\" : \"nav__link\"\r\n              }\r\n            >\r\n              <i class=\"bx bx-home\"></i>\r\n              <span className=\"nav__name\">Home</span>\r\n            </Link>\r\n          </>\r\n          {/* protected links */}\r\n          {loggedIn && (\r\n            <>\r\n              {/* LINKS FOR THE SYSTEM ADMIN */}\r\n              {profile_type === \"System Admin\" && (\r\n                <SysAdminLinks Link={Link} pathname={pathname} />\r\n              )}\r\n\r\n              {/* LINKS FOR THE ORGANIZATION ADMINS */}\r\n              {profile_type === \"Organization Admin\" && (\r\n                <OrganizationAdminLinks Link={Link} pathname={pathname} />\r\n              )}\r\n              {/* LINKS FOR WORKER */}\r\n              {profile_type === \"Worker\" && (\r\n                <WorkerLinks Link={Link} pathname={pathname} />\r\n              )}\r\n              <Link\r\n                to=\"/dashboard/\"\r\n                className={\r\n                  `${pathname}` === \"/dashboard/\"\r\n                    ? \"nav__link active\"\r\n                    : \"nav__link\"\r\n                }\r\n              >\r\n                <i className=\"bx bx-grid-alt nav__icon\"></i>\r\n                <span className=\"nav__name\">Dashboard</span>\r\n              </Link>\r\n              <Link\r\n                to=\"/profile/\"\r\n                className={\r\n                  `${pathname}` === \"/profile/\"\r\n                    ? \"nav__link active\"\r\n                    : \"nav__link\"\r\n                }\r\n              >\r\n                <i class=\"bx bx-user nav__icon\"></i>\r\n                <span className=\"nav__name\">Profile</span>\r\n              </Link>\r\n              <Link\r\n                to=\"\"\r\n                className=\"nav__link\"\r\n                onClick={() => logoutUser(navigate)}\r\n              >\r\n                <i className=\"bx bx-log-out-circle\"></i>\r\n                <span className=\"nav__name\">Logout</span>\r\n              </Link>\r\n            </>\r\n          )}\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loggedIn: state.auth?.loggedIn,\r\n    profile_type: state.auth?.user?.profile_type,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    logoutUser: (navigate) => dispatch(logout(navigate)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar);\r\n","import React from \"react\";\r\n\r\n// styles\r\nimport \"./Dashboard.scss\";\r\n\r\nconst Dashboard = () => {\r\n  return (\r\n    <div>\r\n      <h1>Dashboard</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","// import installed packages\r\nimport { connect } from \"react-redux\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\n// import styles\r\nimport \"./ActivateAccount.scss\";\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\n// import shared/global items\r\n\r\n// import components/pages\r\n\r\n// import redux API\r\nimport { START_LOADING } from \"../../redux/actions/types\";\r\nimport { activate_account } from \"../../redux/actions/auth\";\r\n\r\nconst ActivateAccount = (props) => {\r\n  const { activation_token } = useParams();\r\n  const navigate = useNavigate();\r\n  const { loading } = props; //get state from props\r\n  const { startLoading, activateUser } = props; //get dispatch actions from props\r\n\r\n  const handleActivate = () => {\r\n    // dispatch the loading action\r\n    startLoading();\r\n    activateUser(activation_token, navigate);\r\n  };\r\n\r\n  return (\r\n    <div className=\"activate__account\" id={loading ? \"formSubmitting\" : \"\"}>\r\n      <h1>Click on the button below to verify your account</h1>\r\n      {loading && (\r\n        <CircularProgress style={{ position: \"absolute\", marginLeft: \"1%\" }} />\r\n      )}\r\n      <button type=\"button\" onClick={handleActivate}>\r\n        Verify\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.shared?.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    activateUser: (activation_token, history) =>\r\n      dispatch(activate_account({ activation_token, history })),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivateAccount);\r\n","// import installed packages\r\nimport { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\n// import styles\r\nimport \"./ActivateAccount/ActivateAccount.scss\";\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import shared/global items\r\nimport globals from \"../shared/globals\";\r\nimport { ifEmpty, resetFormValues } from \"../shared/sharedFunctions\";\r\n\r\n// import components/pages\r\nimport MinDialog from \"../components/common/MinDialog\";\r\n\r\n// import redux API\r\nimport {\r\n  CLOSE_PASSWORD_RESET_CONFIRM,\r\n  OPEN_PASSWORD_RESET_CONFIRM,\r\n  START_LOADING,\r\n} from \"../redux/actions/types\";\r\nimport { set_password } from \"../redux/actions/auth\";\r\n\r\nconst ResetPasswordConfirm = (props) => {\r\n  const navigate = useNavigate();\r\n  const { password_token } = useParams();\r\n  const { loading, alert, resetPasswordConfirmForm } = props; // extract state from props\r\n  const {\r\n    startLoading,\r\n    setNewPassword,\r\n    newAlert,\r\n    openNewPassword,\r\n    closeNewPassword,\r\n  } = props; // extract dispatch actions from props\r\n  const [newPasswords, setNewPasswords] = useState({\r\n    new_password: \"\",\r\n    confirm_password: \"\",\r\n  });\r\n\r\n  // destructure values for better code formatting\r\n  // ########### start of destructuring #################  //\r\n  const { new_password, confirm_password } = newPasswords;\r\n  const { error } = globals;\r\n\r\n  // ########### end of destructuring #################  //\r\n\r\n  const resetForm = () => {\r\n    resetFormValues(newPasswords);\r\n  };\r\n\r\n  const closeNewPasswordForm = () => {\r\n    resetForm();\r\n    closeNewPassword();\r\n  };\r\n\r\n  // handle change\r\n  const handleChange = (e) =>\r\n    setNewPasswords({ ...newPasswords, [e.target.name]: e.target.value });\r\n\r\n  // function to submit new password\r\n  const handleSetNewPassword = (e) => {\r\n    e.preventDefault();\r\n    if (ifEmpty(newPasswords)) {\r\n      return newAlert(error, \"Both fields are required\");\r\n    }\r\n    startLoading();\r\n\r\n    // call the signup action creator\r\n    setNewPassword(newPasswords, password_token, navigate);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"activate__account\">\r\n        <h1>Click the button to set new password</h1>\r\n        <button type=\"button\" onClick={openNewPassword}>\r\n          Set New password\r\n        </button>\r\n      </div>\r\n      <MinDialog isOpen={resetPasswordConfirmForm}>\r\n        <form className=\"dialog\" id={loading ? \"formSubmitting\" : \"\"}>\r\n          <h3>Enter new password</h3>\r\n          <p className={`response__message ${alert.alertType}`}>\r\n            {alert.status && alert.detail}\r\n          </p>\r\n          <div className=\"dialog__rowSingleItem\">\r\n            <label htmlFor=\"\">New Password</label>\r\n            <input\r\n              type=\"password\"\r\n              name=\"new_password\"\r\n              onChange={handleChange}\r\n              value={new_password}\r\n            />\r\n          </div>\r\n          {loading && (\r\n            <CircularProgress\r\n              style={{ position: \"absolute\", marginLeft: \"43%\" }}\r\n            />\r\n          )}\r\n          <div className=\"dialog__rowSingleItem\">\r\n            <label htmlFor=\"\">Confirm New Password</label>\r\n            <input\r\n              type=\"password\"\r\n              name=\"confirm_password\"\r\n              onChange={handleChange}\r\n              value={confirm_password}\r\n            />\r\n          </div>\r\n          <div className=\"form__Buttons\">\r\n            <button type=\"button\" onClick={closeNewPasswordForm}>\r\n              Close\r\n            </button>\r\n            <button type=\"submit\" onClick={handleSetNewPassword}>\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </MinDialog>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.shared?.loading,\r\n    resetPasswordConfirmForm: state.auth?.resetPasswordConfirmForm,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    setNewPassword: (newPasswords, password_token, history) =>\r\n      dispatch(set_password(newPasswords, password_token, history)),\r\n    openNewPassword: () => dispatch({ type: OPEN_PASSWORD_RESET_CONFIRM }),\r\n    closeNewPassword: () => dispatch({ type: CLOSE_PASSWORD_RESET_CONFIRM }),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ResetPasswordConfirm);\r\n","// styles\r\nimport \"./NotFound.scss\";\r\n\r\nfunction NotFound() {\r\n  return (\r\n    <div className=\"not__found\">\r\n      <h1 className=\"not__foundHeading\">404 resource not found</h1>\r\n      <p>Please try again.</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","// import installed packages\r\nimport { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n// import styles\r\n\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import shared/global items\r\nimport { ifEmpty, resetFormValues } from \"../../shared/sharedFunctions\";\r\n// import components/pages\r\nimport MinDialog from \"../common/MinDialog\";\r\n\r\n// import redux API\r\nimport {\r\n  CLOSE_CHANGE_PASSWORD,\r\n  START_LOADING,\r\n} from \"../../redux/actions/types\";\r\nimport { change_password } from \"../../redux/actions/auth\";\r\n\r\nconst ChangePassword = (props) => {\r\n  const navigate = useNavigate();\r\n  const { loading, changePasswordForm, userId } = props; // extract state from props\r\n  const { startLoading, changeUserPassword, closeChangePassword } = props; // extract dispatch actions from props\r\n\r\n  // internal state\r\n  const [passwords, setPasswords] = useState({\r\n    current_password: \"\",\r\n    new_password: \"\",\r\n    confirm_new_password: \"\",\r\n  });\r\n\r\n  //############### destructuring code ###################//\r\n  const { current_password, new_password, confirm_new_password } = passwords;\r\n  //#################end of destructuring ###########//\r\n\r\n  const resetForm = () => {\r\n    resetFormValues(passwords);\r\n  };\r\n\r\n  const closeChangePasswordForm = () => {\r\n    resetForm();\r\n    closeChangePassword();\r\n  };\r\n\r\n  // handle change function\r\n  const handleChange = (e) => {\r\n    setPasswords({ ...passwords, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // function to handle password change\r\n  const handlePasswordChange = (e) => {\r\n    e.preventDefault();\r\n    if (ifEmpty(passwords)) {\r\n      return window.alert(\"All fields are required\");\r\n    }\r\n    startLoading();\r\n    // call the signup action creator\r\n    changeUserPassword(passwords, userId, navigate, resetForm);\r\n  };\r\n  return (\r\n    <MinDialog isOpen={changePasswordForm}>\r\n      <form className=\"dialog\" id={loading ? \"formSubmitting\" : \"\"}>\r\n        <h3>Change your password here</h3>\r\n        <div className=\"dialog__rowSingleItem\">\r\n          <label htmlFor=\"\">Old Password</label>\r\n          <input\r\n            type=\"password\"\r\n            name=\"current_password\"\r\n            value={current_password}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        {loading && (\r\n          <CircularProgress\r\n            style={{ position: \"absolute\", marginLeft: \"40%\" }}\r\n          />\r\n        )}\r\n        <div className=\"dialog__rowSingleItem\">\r\n          <label htmlFor=\"\">New Password</label>\r\n          <input\r\n            type=\"password\"\r\n            name=\"new_password\"\r\n            value={new_password}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"dialog__rowSingleItem\">\r\n          <label htmlFor=\"\">Confirm New Password</label>\r\n          <input\r\n            type=\"password\"\r\n            name=\"confirm_new_password\"\r\n            value={confirm_new_password}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"form__Buttons\">\r\n          <button type=\"button\" onClick={closeChangePasswordForm}>\r\n            Close\r\n          </button>\r\n          <button type=\"submit\" onClick={handlePasswordChange}>\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </MinDialog>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.shared?.loading,\r\n    changePasswordForm: state.auth?.changePasswordForm,\r\n    userId: state.auth.user?.id,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    changeUserPassword: (passwords, userId, history, resetForm) =>\r\n      dispatch(change_password(passwords, userId, history, resetForm)),\r\n    closeChangePassword: () => dispatch({ type: CLOSE_CHANGE_PASSWORD }),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangePassword);\r\n","import \"./Toolbar.css\";\r\n\r\n// alternative to exec\r\n//github.com/basecamp/trix\r\n\r\nconst Toolbar = () => {\r\n  function format(com, val) {\r\n    document.execCommand(com, false, val);\r\n  }\r\n\r\n  return (\r\n    <div id=\"toolbar\">\r\n      {/* bold text */}\r\n\r\n      <button onClick={(e) => format(\"bold\")} type=\"button\">\r\n        <i class=\"fa fa-bold\"></i>\r\n      </button>\r\n      {/* italic text */}\r\n      <button onClick={(e) => format(\"italic\")} type=\"button\">\r\n        <i class=\"fa fa-italic\"></i>\r\n      </button>\r\n      {/* unordered list */}\r\n      <button onClick={(e) => format(\"insertUnorderedList\")} type=\"button\">\r\n        <i class=\"fa fa-list-ul\"></i>\r\n      </button>\r\n      {/* ordered list */}\r\n      <button onClick={(e) => format(\"insertOrderedList\")} type=\"button\">\r\n        <i class=\"fa fa-list-ol\"></i>\r\n      </button>\r\n      {/* underline text */}\r\n      <button onClick={(e) => format(\"underline\")} type=\"button\">\r\n        <i class=\"fa fa-underline\"></i>\r\n      </button>\r\n      {/* subscript */}\r\n      <button onClick={(e) => format(\"subscript\")} type=\"button\">\r\n        <i class=\"fa fa-subscript\"></i>\r\n      </button>\r\n      {/* superscript */}\r\n      <button onClick={(e) => format(\"superscript\")} type=\"button\">\r\n        <i class=\"fa fa-superscript\"></i>\r\n      </button>\r\n      {/* outdent / indent left */}\r\n      <button onClick={(e) => format(\"outdent\")} type=\"button\">\r\n        <i class=\"fa fa-outdent\"></i>\r\n      </button>\r\n      {/* indent right */}\r\n      <button onClick={(e) => format(\"indent\")} type=\"button\">\r\n        <i class=\"fa fa-indent\"></i>\r\n      </button>\r\n\r\n      {/* align full */}\r\n      <button onClick={(e) => format(\"justifyFull\")} type=\"button\">\r\n        <i class=\"fa fa-align-justify\"></i>\r\n      </button>\r\n      {/* align left */}\r\n      <button onClick={(e) => format(\"justifyLeft\")} type=\"button\">\r\n        <i class=\"fa fa-align-left\"></i>\r\n      </button>\r\n      {/* align center */}\r\n      <button onClick={(e) => format(\"justifyCenter\")} type=\"button\">\r\n        <i class=\"fa fa-align-center\"></i>\r\n      </button>\r\n      {/* align right */}\r\n      <button onClick={(e) => format(\"justifyRight\")} type=\"button\">\r\n        <i class=\"fa fa-align-right\"></i>\r\n      </button>\r\n\r\n      {/* undo */}\r\n      <button onClick={(e) => format(\"undo\")} type=\"button\">\r\n        <i class=\"fa fa-undo\"></i>\r\n      </button>\r\n      {/* redo */}\r\n      <button onClick={(e) => format(\"redo\")} type=\"button\">\r\n        <i class=\"fa fa-repeat\"></i>\r\n      </button>\r\n      {/* strike through */}\r\n      <button onClick={(e) => format(\"strikethrough\")} type=\"button\">\r\n        <i class=\"fa fa-strikethrough\"></i>\r\n      </button>\r\n      <button onClick={() => format(\"selectAll\")} type=\"button\">\r\n        All\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Toolbar;\r\n","import ContentEditable from \"react-contenteditable\";\r\n\r\nimport Toolbar from \"./Toolbar\";\r\n\r\n// styles\r\nimport \"./Markdown.scss\";\r\n\r\nconst Markdown = ({ content, setContent }) => {\r\n  // there is no need to maintain state as we can just access the data through getting the element and then the innerHTML\r\n  // in addition, onChange events as well as blur events as causing a problem with operation\r\n  // const handleSubmit = () => {\r\n  // const content = document.getElementById(\"editorContent\").innerHTML;\r\n  // console.log(content);\r\n  // };\r\n  return (\r\n    <div className=\"editor\">\r\n      <div className=\"editor__buttons\">\r\n        <Toolbar />\r\n      </div>\r\n      <div className=\"editor__edit\">\r\n        {/* we use a div to allow html because a textarea does not support html */}\r\n        <ContentEditable\r\n          id=\"editorContent\"\r\n          onChange={(e) => setContent(e.target.value)}\r\n          html={content}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Markdown;\r\n","import * as api from \"../../api\";\r\nimport * as actionTypes from \"./types\";\r\n\r\nimport { showError, stopLoading } from \"./shared\";\r\n\r\nexport const add_organization =\r\n  (userId, body, resetForm) => async (dispatch) => {\r\n    await api\r\n      .addOrganization(userId, body)\r\n      .then((res) => {\r\n        resetForm();\r\n        window.alert(res.data?.detail);\r\n        dispatch({\r\n          type: actionTypes.ADD_ORGANIZATION,\r\n          payload: res.data?.organization_data,\r\n        });\r\n      })\r\n      .catch((err) => showError(err))\r\n      .finally(() => stopLoading(dispatch));\r\n  };\r\n\r\n// action to get organizations\r\nexport const get_organizations = (userId) => async (dispatch) => {\r\n  await api\r\n    .getOrganizations(userId)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: actionTypes?.GET_ORGANIZATIONS,\r\n        payload: res.data?.organizations_data,\r\n      });\r\n    })\r\n    .catch((err) => showError(err))\r\n    .finally(() => stopLoading(dispatch));\r\n};\r\n\r\n// sys admin action to add organization admin\r\nexport const add_or_remove_organization_admin =\r\n  (userId, body, resetForm) => async (dispatch) => {\r\n    await api\r\n      .addOrRemoveOrganizationAdmin(userId, body)\r\n      .then((res) => {\r\n        resetForm();\r\n        dispatch({\r\n          type: actionTypes.UPDATE_ORGANIZATION,\r\n          payload: res.data?.updated_organization,\r\n        });\r\n        window.alert(res.data?.detail);\r\n      })\r\n      .catch((err) => showError(err))\r\n      .finally(() => stopLoading(dispatch));\r\n  };\r\n\r\n// organization admin add task\r\nexport const new_organization_task =\r\n  (userId, body, resetForm) => async (dispatch) => {\r\n    await api\r\n      .newOrganizationTask(userId, body)\r\n      .then((res) => {\r\n        resetForm();\r\n        dispatch({\r\n          type: actionTypes.NEW_ORGANIZATION_TASK,\r\n          payload: res.data?.new_task,\r\n        });\r\n        window.alert(res.data?.detail);\r\n        window.location.replace(\r\n          `/accounting/make-payment/${res.data?.taskId}/${res.data?.taskAmount}/${res.data?.merchant_ref}/`\r\n        );\r\n      })\r\n      .catch((err) => showError(err))\r\n      .finally(() => stopLoading(dispatch));\r\n  };\r\n\r\n// organization admin get all tasks\r\nexport const get_all_tasks = (userId) => async (dispatch) => {\r\n  await api\r\n    .getAllTasks(userId)\r\n    .then((res) => {\r\n      dispatch({ type: actionTypes.GET_TASKS, payload: res.data?.tasks_data });\r\n    })\r\n    .catch((err) => showError(err))\r\n    .finally(() => stopLoading(dispatch));\r\n};\r\n\r\n// organization admin edit task\r\nexport const edit_organization_task = (userId, body) => async (dispatch) => {\r\n  await api\r\n    .editOrganizationTask(userId, body)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: actionTypes.EDIT_ORGANIZATION_TASK,\r\n        payload: res.data?.updated_task,\r\n      });\r\n      window.alert(res.data?.detail);\r\n    })\r\n    .catch((err) => showError(err))\r\n    .finally(() => stopLoading(dispatch));\r\n};\r\n\r\n// POST worker application apply action\r\nexport const worker_application = (userId, body) => async (dispatch) => {\r\n  await api\r\n    .workerApplication(userId, body)\r\n    .then((res) => {\r\n      window.alert(res.data?.detail);\r\n    })\r\n    .catch((err) => showError(err))\r\n    .finally(() => stopLoading(dispatch));\r\n};\r\n\r\n// get worker application action#\r\nexport const get_workers = (userId) => async (dispatch) => {\r\n  await api\r\n    .getWorkers(userId)\r\n    .then((res) => {\r\n      dispatch({ type: actionTypes.GET_WORKERS, payload: res.data });\r\n    })\r\n    .catch((err) => showError(err))\r\n    .finally(() => stopLoading(dispatch));\r\n};\r\n\r\n// edit worker application\r\nexport const edit_worker_or_application =\r\n  (userId, body) => async (dispatch) => {\r\n    await api\r\n      .editWorkerOrApplication(userId, body)\r\n      .then((res) => {\r\n        dispatch({\r\n          type: actionTypes.EDIT_WORKER,\r\n          payload: res.data?.updated_application,\r\n        });\r\n        window.alert(res.data?.detail);\r\n      })\r\n      .catch((err) => showError(err))\r\n      .finally(() => stopLoading(dispatch));\r\n  };\r\n","// import installed packages\r\nimport { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import styles\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import shared/global items\r\nimport { ifEmpty } from \"../../../shared/sharedFunctions\";\r\n// import components/pages\r\nimport Markdown from \"../../../components/common/Markdown/Markdown\";\r\nimport MediumDialog from \"../../../components/common/MediumDialog\";\r\n// import redux API\r\nimport { START_LOADING } from \"../../../redux/actions/types\";\r\nimport { worker_application } from \"../../../redux/actions/work\";\r\n\r\nconst WorkerApplication = (props) => {\r\n  const { openWorkerApplication, loading, userId } = props;\r\n  const { setOpenWorkerApplication, startLoading, workerApplication } = props;\r\n  const [description, setDescription] = useState(\"\");\r\n  const [applicationDetails, setApplicationDetails] = useState({\r\n    mpesa_number: \"\",\r\n    national_id: \"\",\r\n    occupation: \"\",\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    setApplicationDetails({\r\n      ...applicationDetails,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpenWorkerApplication(false);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (ifEmpty(applicationDetails) || description.trim() === \"\") {\r\n      return window.alert(\"Please fill all fields\");\r\n    }\r\n    startLoading();\r\n    const body = {\r\n      ...applicationDetails,\r\n      about_worker: description,\r\n    };\r\n    workerApplication(userId, body);\r\n  };\r\n\r\n  // DESTRUCTURING\r\n  const { mpesa_number, national_id, occupation } = applicationDetails;\r\n  return (\r\n    <MediumDialog isOpen={openWorkerApplication} maxWidth=\"800px\">\r\n      <form\r\n        className=\"dialog\"\r\n        onSubmit={handleSubmit}\r\n        id={loading ? \"formSubmitting\" : \"\"}\r\n      >\r\n        <h3>Enter your details</h3>\r\n        <div className=\"dialog__row\">\r\n          <span>\r\n            <label htmlFor=\"\">National ID</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"national_id\"\r\n              value={national_id}\r\n              onChange={handleChange}\r\n            />\r\n          </span>\r\n          <span>\r\n            <label htmlFor=\"\">Mpesa Number</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"mpesa_number\"\r\n              value={mpesa_number}\r\n              onChange={handleChange}\r\n            />\r\n          </span>\r\n        </div>\r\n        <div className=\"dialog__rowSingleItem\">\r\n          <label htmlFor=\"\">Occupation</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"occupation\"\r\n            onChange={handleChange}\r\n            value={occupation}\r\n          />\r\n        </div>\r\n        {loading && (\r\n          <CircularProgress\r\n            style={{ position: \"absolute\", marginLeft: \"43%\" }}\r\n          />\r\n        )}\r\n        <div className=\"dialog__rowSingleItem\">\r\n          <label htmlFor=\"\">About yourself</label>\r\n          <Markdown content={description} setContent={setDescription} />\r\n        </div>\r\n        <div className=\"form__Buttons\">\r\n          <button type=\"button\" onClick={handleClose}>\r\n            Close\r\n          </button>\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </MediumDialog>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.shared?.loading,\r\n    userId: state.auth.user?.id,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    workerApplication: (userId, body) =>\r\n      dispatch(worker_application(userId, body)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WorkerApplication);\r\n","// import installed packages\r\nimport { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// import styles\r\nimport \"./Profile.scss\";\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import shared/global items\r\nimport { ifEmpty } from \"../../shared/sharedFunctions\";\r\n// import components/pages\r\nimport ChangePassword from \"../../components/users/ChangePassword\";\r\nimport WorkerApplication from \"../worker/components/WorkerApplication\";\r\n// import redux API\r\nimport { OPEN_CHANGE_PASSWORD, START_LOADING } from \"../../redux/actions/types\";\r\nimport { update_user } from \"../../redux/actions/auth\";\r\n\r\nconst Profile = (props) => {\r\n  const {\r\n    first_name,\r\n    last_name,\r\n    username,\r\n    email,\r\n    bio,\r\n    userId,\r\n    loading,\r\n    has_applied_as_worker,\r\n  } = props; // extract state from props\r\n  const { startLoading, updateUser, openChangePassword } = props; // extract dispatch actions from props\r\n  // internal state\r\n  const [updatedUser, setUpdatedUser] = useState({});\r\n  const [openWorkerApplication, setOpenWorkerApplication] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setUpdatedUser({\r\n      first_name,\r\n      last_name,\r\n      username,\r\n      email,\r\n      bio,\r\n    });\r\n  }, [first_name, last_name, email, username, bio]);\r\n\r\n  // function to update user details\r\n  const updateUserDetails = (e) => {\r\n    e.preventDefault();\r\n    if (ifEmpty(updatedUser)) {\r\n      alert(\"Fill all fields are to update your profile\");\r\n    }\r\n    startLoading();\r\n    // call the signup action creator\r\n    updateUser(updatedUser, userId);\r\n  };\r\n\r\n  // handle change function\r\n  const handleChange = (e) => {\r\n    setUpdatedUser({ ...updatedUser, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const openWorkerApplicationForm = () => {\r\n    setOpenWorkerApplication(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"profile\" id={loading ? \"formSubmitting\" : \"\"}>\r\n      <h2>Profile Details</h2>\r\n      <div className=\"profile__row\">\r\n        <span>\r\n          <label htmlFor=\"\">First Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"first_name\"\r\n            value={updatedUser.first_name}\r\n            onChange={handleChange}\r\n          />\r\n        </span>\r\n        <span>\r\n          <label htmlFor=\"\">Last Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"last_name\"\r\n            value={updatedUser.last_name}\r\n            onChange={handleChange}\r\n          />\r\n        </span>\r\n      </div>\r\n      {loading && (\r\n        <CircularProgress style={{ position: \"absolute\", marginLeft: \"30%\" }} />\r\n      )}\r\n      <div className=\"profile__row\">\r\n        <span>\r\n          <label htmlFor=\"\">Username</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"username\"\r\n            value={updatedUser.username}\r\n            onChange={handleChange}\r\n          />\r\n        </span>\r\n        <span>\r\n          <label htmlFor=\"\">Email</label>\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={updatedUser.email}\r\n            onChange={handleChange}\r\n          />\r\n        </span>\r\n      </div>\r\n\r\n      <div className=\"profile__rowSingleItem\">\r\n        <label htmlFor=\"\">Bio</label>\r\n        <textarea name=\"bio\" value={updatedUser.bio} onChange={handleChange} />\r\n      </div>\r\n      <div className=\"profile__Buttons\">\r\n        {!has_applied_as_worker && (\r\n          <button\r\n            type=\"button\"\r\n            className=\"add__button\"\r\n            onClick={openWorkerApplicationForm}\r\n          >\r\n            Worker Application\r\n          </button>\r\n        )}\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"change__password\"\r\n          onClick={openChangePassword}\r\n        >\r\n          Change Password\r\n        </button>\r\n        <button type=\"submit\" className=\"update\" onClick={updateUserDetails}>\r\n          Update Profile\r\n        </button>\r\n      </div>\r\n\r\n      {/* child components */}\r\n      {OPEN_CHANGE_PASSWORD && <ChangePassword />}\r\n      {openWorkerApplication && (\r\n        <WorkerApplication\r\n          openWorkerApplication={openWorkerApplication}\r\n          setOpenWorkerApplication={setOpenWorkerApplication}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    first_name: state.auth.user?.first_name,\r\n    last_name: state.auth.user?.last_name,\r\n    username: state.auth.user?.username,\r\n    email: state.auth.user?.email,\r\n    bio: state.auth.user?.bio,\r\n    userId: state.auth.user?.id,\r\n    has_applied_as_worker: state.auth.user?.has_applied_as_worker,\r\n    loading: state.shared?.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    updateUser: (updatedUser, userId) =>\r\n      dispatch(update_user(updatedUser, userId)),\r\n    openChangePassword: () => dispatch({ type: OPEN_CHANGE_PASSWORD }),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\r\n","// import installed packages\r\nimport { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// import styles\r\n\r\n// import material ui items\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n// import shared/global items\r\nimport { ifEmpty, resetFormValues } from \"../../../../shared/sharedFunctions\";\r\n// import components/pages\r\n\r\nimport MediumDialog from \"../../../../components/common/MediumDialog\";\r\nimport { START_LOADING } from \"../../../../redux/actions/types\";\r\nimport { add_organization } from \"../../../../redux/actions/work\";\r\n// import redux API\r\n\r\nconst AddOrganization = (props) => {\r\n  const { openAddOrganization, loading, userId } = props;\r\n  const { setOpenAddOrganization, startLoading, addOrganization } = props;\r\n  const [newOrganization, setNewOrganization] = useState({\r\n    name: \"\",\r\n    initials: \"\",\r\n  });\r\n\r\n  ////////// DESTRUCTURING VALUES\r\n  const { name, initials } = newOrganization;\r\n\r\n  const handleChange = (e) => {\r\n    setNewOrganization({ ...newOrganization, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const resetForm = () => {\r\n    resetFormValues(newOrganization);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    resetForm();\r\n    setOpenAddOrganization(false);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (ifEmpty(newOrganization)) {\r\n      return window.alert(\"All fields are required\");\r\n    }\r\n    startLoading();\r\n    addOrganization(userId, newOrganization, resetForm);\r\n  };\r\n\r\n  return (\r\n    <MediumDialog isOpen={openAddOrganization} maxWidth=\"800px\">\r\n      <form className=\"dialog\" id={loading ? \"formSubmitting\" : \"\"}>\r\n        <h3>Organization details</h3>\r\n        <div className=\"dialog__row\">\r\n          <span>\r\n            <label htmlFor=\"\">Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              onChange={handleChange}\r\n              value={name}\r\n            />\r\n          </span>\r\n          {loading && (\r\n            <CircularProgress\r\n              style={{ position: \"absolute\", marginLeft: \"42%\" }}\r\n            />\r\n          )}\r\n          <span>\r\n            <label htmlFor=\"\">Initials</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"initials\"\r\n              onChange={handleChange}\r\n              value={initials}\r\n            />\r\n          </span>\r\n        </div>\r\n        <div className=\"form__Buttons\">\r\n          <button type=\"button\" onClick={handleClose}>\r\n            Close\r\n          </button>\r\n          <button type=\"button\" onClick={handleSubmit}>\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </MediumDialog>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.shared?.loading,\r\n    userId: state.auth.user?.id,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    addOrganization: (userId, body, resetForm) =>\r\n      dispatch(add_organization(userId, body, resetForm)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddOrganization);\r\n","// import installed packages\r\nimport { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import styles\r\n\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import shared/global items\r\n\r\n// import components/pages\r\nimport MinDialog from \"../../../../components/common/MinDialog\";\r\n\r\n// import redux API\r\nimport { START_LOADING } from \"../../../../redux/actions/types\";\r\nimport { add_or_remove_organization_admin } from \"../../../../redux/actions/work\";\r\n\r\nconst AddOrganizationAdmin = (props) => {\r\n  const { openAddOrganizationAdmin, userId, loading, organizationId } = props;\r\n  const { setOpenAddOrganizationAdmin, addOrganizationAdmin, startLoading } =\r\n    props;\r\n  const [userEmail, setUserEmail] = useState(\"\");\r\n\r\n  const resetForm = () => {\r\n    setUserEmail(\"\");\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpenAddOrganizationAdmin(false);\r\n    resetForm();\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (userEmail.trim() === \"\") {\r\n      return window.alert(\"Please enter a valid email\");\r\n    }\r\n    const body = {\r\n      userEmail,\r\n      actionType: \"add_organization_admin\",\r\n      organizationId,\r\n    };\r\n    startLoading();\r\n    addOrganizationAdmin(userId, body, resetForm);\r\n  };\r\n\r\n  return (\r\n    <MinDialog isOpen={openAddOrganizationAdmin} maxWidth=\"500px\">\r\n      <form\r\n        className=\"dialog\"\r\n        id={loading ? \"formSubmitting\" : \"\"}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <h3>Enter user email</h3>\r\n        {loading && (\r\n          <CircularProgress\r\n            style={{ position: \"absolute\", marginLeft: \"40%\" }}\r\n          />\r\n        )}\r\n        <div className=\"dialog__rowSingleItem\">\r\n          <label htmlFor=\"\">Email</label>\r\n          <input\r\n            type=\"email\"\r\n            onChange={(e) => setUserEmail(e.target.value)}\r\n            value={userEmail}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form__Buttons\">\r\n          <button type=\"button\" onClick={handleClose}>\r\n            Close\r\n          </button>\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </MinDialog>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userId: state.auth.user?.id,\r\n    loading: state.shared?.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    addOrganizationAdmin: (userId, body, resetForm) =>\r\n      dispatch(add_or_remove_organization_admin(userId, body, resetForm)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AddOrganizationAdmin);\r\n","// import installed packages\r\nimport { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// import styles\r\n\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import shared/global items\r\n\r\n// import components/pages\r\nimport AddOrganization from \"./components/AddOrganization\";\r\nimport AddOrganizationAdmin from \"./components/AddOrganizationAdmin\";\r\n// import redux API\r\nimport { START_LOADING } from \"../../../redux/actions/types\";\r\nimport {\r\n  add_or_remove_organization_admin,\r\n  get_organizations,\r\n} from \"../../../redux/actions/work\";\r\n\r\nconst MaintainOrganizations = (props) => {\r\n  const { organizations, userId, loading } = props;\r\n  const { getOrganizations, startLoading, removeOrganizationAdmin } = props;\r\n  const [openAddOrganization, setOpenAddOrganization] = useState(false);\r\n  const [openAddOrganizationAdmin, setOpenAddOrganizationAdmin] =\r\n    useState(false);\r\n  const [currentOrganizationId, setCurrentOrganizationId] = useState({});\r\n\r\n  // useEffect to get all organizations\r\n  useEffect(() => {\r\n    if (userId && organizations?.length === 0) {\r\n      startLoading();\r\n      getOrganizations(userId);\r\n    }\r\n  }, [startLoading, getOrganizations, organizations?.length, userId]);\r\n\r\n  const openAddOrganizationAdminForm = (organizationId) => {\r\n    setOpenAddOrganizationAdmin(true);\r\n    setCurrentOrganizationId(organizationId);\r\n  };\r\n\r\n  // since reset form is an argument in add_or_remove action call, we just define and empty resetform function\r\n  const resetForm = () => {};\r\n\r\n  // function to handle remove organization admin\r\n  const deleteOrganizationAdmin = (organizationId) => {\r\n    if (\r\n      window.confirm(`Are you sure you want to remove this organization admin?`)\r\n    ) {\r\n      startLoading();\r\n      const body = {\r\n        actionType: \"remove_organization_admin\",\r\n        organizationId,\r\n      };\r\n      removeOrganizationAdmin(userId, body, resetForm);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"table__parent\" id={loading ? \"pageSubmitting\" : \"\"}>\r\n        <div className=\"table__parentHeader\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"add__button\"\r\n            onClick={() => setOpenAddOrganization(true)}\r\n          >\r\n            Add\r\n          </button>\r\n          <h3> Maintain organizations here</h3>\r\n          {loading && <CircularProgress style={{ position: \"absolute\" }} />}\r\n        </div>\r\n        <table className=\"table__listing\">\r\n          {organizations?.length > 0 ? (\r\n            <>\r\n              <tr className=\"table__listingHeader\">\r\n                <th>No:</th>\r\n                <th>Name</th>\r\n                <th>Initials</th>\r\n                <th>Admin</th>\r\n              </tr>\r\n              {organizations?.map((organization, index) => (\r\n                <tr className=\"table__listingItem\" key={organization?.id}>\r\n                  <td>{index + 1}</td>\r\n                  <td>{organization.name}</td>\r\n                  <td>{organization.initials}</td>\r\n                  {organization?.organization_admin_email ? (\r\n                    <td\r\n                      className=\"remove__item\"\r\n                      title=\"Click to remove admin\"\r\n                      onClick={() => deleteOrganizationAdmin(organization?.id)}\r\n                    >\r\n                      {organization?.organization_admin_email}\r\n                    </td>\r\n                  ) : (\r\n                    <td\r\n                      className=\"button dodgerblue bd\"\r\n                      onClick={() =>\r\n                        openAddOrganizationAdminForm(organization?.id)\r\n                      }\r\n                    >\r\n                      add\r\n                    </td>\r\n                  )}\r\n                </tr>\r\n              ))}\r\n            </>\r\n          ) : (\r\n            <h4 className=\"not__available\">No organizations available</h4>\r\n          )}\r\n        </table>\r\n      </div>\r\n      {/* child components */}\r\n      {openAddOrganization && (\r\n        <AddOrganization\r\n          openAddOrganization={openAddOrganization}\r\n          setOpenAddOrganization={setOpenAddOrganization}\r\n        />\r\n      )}\r\n      {openAddOrganizationAdmin && (\r\n        <AddOrganizationAdmin\r\n          openAddOrganizationAdmin={openAddOrganizationAdmin}\r\n          setOpenAddOrganizationAdmin={setOpenAddOrganizationAdmin}\r\n          organizationId={currentOrganizationId}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    organizations: state.work?.organizations,\r\n    userId: state.auth.user?.id,\r\n    loading: state.shared?.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    getOrganizations: (userId) => dispatch(get_organizations(userId)),\r\n    removeOrganizationAdmin: (userId, body, resetForm) =>\r\n      dispatch(add_or_remove_organization_admin(userId, body, resetForm)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MaintainOrganizations);\r\n","// import installed packages\r\nimport { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import styles\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import shared/global items\r\nimport { ifEmpty, resetFormValues } from \"../../../../shared/sharedFunctions\";\r\n// import components/pages\r\nimport MediumDialog from \"../../../../components/common/MediumDialog\";\r\nimport Markdown from \"../../../../components/common/Markdown/Markdown\";\r\n// import redux API\r\nimport { START_LOADING } from \"../../../../redux/actions/types\";\r\nimport { new_organization_task } from \"../../../../redux/actions/work\";\r\n\r\nconst AddTask = (props) => {\r\n  const { openAddTask, loading, userId } = props;\r\n  const { setOpenAddTask, startLoading, newOrganizationTask } = props;\r\n  const [newTask, setNewTask] = useState({\r\n    title: \"\",\r\n    user_minimum_rating: \"\",\r\n    status: \"\",\r\n    attachment: \"\",\r\n    amount: \"\",\r\n  });\r\n  const [instructions, setInstructions] = useState(\"\");\r\n\r\n  // DESTRUCTURING\r\n  const { title, user_minimum_rating, status, attachment, amount } = newTask;\r\n\r\n  const handleChange = (e) => {\r\n    setNewTask({ ...newTask, [e.target.name]: e.target.value });\r\n  };\r\n  const handleFileChange = (e) => {\r\n    setNewTask({ ...newTask, [e.target.name]: e.target.files[0] });\r\n  };\r\n\r\n  const resetForm = () => {\r\n    resetFormValues(newTask);\r\n    setInstructions(\"\");\r\n  };\r\n  const handleClose = () => {\r\n    resetForm();\r\n    setOpenAddTask(false);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (ifEmpty(newTask) || instructions.trim() === \"\") {\r\n      return window.alert(\"Please fill all fields\");\r\n    }\r\n    if (user_minimum_rating > 5 || user_minimum_rating < 1) {\r\n      return window.alert(\r\n        \"User qualification rating should be between 1 and 5\"\r\n      );\r\n    }\r\n    startLoading();\r\n    let formData = new FormData();\r\n    formData.append(\"attachment\", attachment, attachment.name);\r\n    formData.append(\"user_minimum_rating\", user_minimum_rating);\r\n    formData.append(\"status\", status);\r\n    formData.append(\"title\", title);\r\n    formData.append(\"instructions\", instructions);\r\n    formData.append(\"amount\", amount);\r\n    newOrganizationTask(userId, formData, resetForm);\r\n  };\r\n\r\n  return (\r\n    <MediumDialog isOpen={openAddTask} maxWidth=\"850px\">\r\n      <form\r\n        className=\"dialog\"\r\n        onSubmit={handleSubmit}\r\n        id={loading ? \"formSubmitting\" : \"\"}\r\n      >\r\n        <h3>Task details</h3>\r\n        <div className=\"dialog__row\">\r\n          <span>\r\n            <label htmlFor=\"\">Title</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              onChange={handleChange}\r\n              value={title}\r\n            />\r\n          </span>\r\n          <span title=\"The minimum qualification required for workers to work on this task\">\r\n            <label htmlFor=\"\">User Qualification Rating (1 - 5)</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"user_minimum_rating\"\r\n              onChange={handleChange}\r\n              value={user_minimum_rating}\r\n              min=\"1\"\r\n              step=\"0.1\"\r\n              max=\"5\"\r\n            />\r\n          </span>\r\n        </div>\r\n        {loading && (\r\n          <CircularProgress\r\n            style={{ position: \"absolute\", marginLeft: \"43%\" }}\r\n          />\r\n        )}\r\n        <div className=\"dialog__row\">\r\n          <span>\r\n            <label htmlFor=\"\">Task Status</label>\r\n            <select name=\"status\" onChange={handleChange} value={status}>\r\n              <option value=\"\" disabled selected>\r\n                ---select---\r\n              </option>\r\n              <option value=\"draft\">Draft</option>\r\n              <option value=\"available\">Published</option>\r\n            </select>\r\n          </span>\r\n          <span>\r\n            <label htmlFor=\"\">Task Attachment</label>\r\n            <input type=\"file\" name=\"attachment\" onChange={handleFileChange} />\r\n          </span>\r\n        </div>\r\n        <div className=\"dialog__row\">\r\n          <span>\r\n            <label htmlFor=\"\">Amount Payable</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"amount\"\r\n              min=\"1\"\r\n              step=\"0.1\"\r\n              onChange={handleChange}\r\n              value={amount}\r\n            />\r\n          </span>\r\n        </div>\r\n        <div className=\"dialog__rowSingleItem\">\r\n          <label htmlFor=\"\">Task Instructions</label>\r\n          <Markdown content={instructions} setContent={setInstructions} />\r\n        </div>\r\n        <div className=\"form__Buttons\">\r\n          <button type=\"button\" onClick={handleClose}>\r\n            Close\r\n          </button>\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </MediumDialog>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.shared?.loading,\r\n    userId: state.auth.user?.id,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    newOrganizationTask: (userId, body, resetForm) =>\r\n      dispatch(new_organization_task(userId, body, resetForm)),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTask);\r\n","// import installed packages\r\nimport { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import styles\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import shared/global items\r\n// import components/pages\r\nimport MediumDialog from \"../../../../components/common/MediumDialog\";\r\nimport Markdown from \"../../../../components/common/Markdown/Markdown\";\r\n// import redux API\r\nimport { START_LOADING } from \"../../../../redux/actions/types\";\r\nimport { edit_organization_task } from \"../../../../redux/actions/work\";\r\n\r\nconst EditTask = (props) => {\r\n  const { openEditTask, currentTask, userId, loading } = props;\r\n  const { setCurrentTask, setOpenEditTask, startLoading, editOrganization } =\r\n    props;\r\n  const [instructions, setInstructions] = useState(\"\");\r\n\r\n  // DESTRUCTURING\r\n  const { title, user_minimum_rating, status, attachment } = currentTask;\r\n\r\n  useEffect(() => {\r\n    setInstructions(currentTask?.instructions);\r\n  }, [currentTask?.instructions]);\r\n\r\n  const handleChange = (e) => {\r\n    setCurrentTask({ ...currentTask, [e.target.name]: e.target.value });\r\n  };\r\n  const handleFileChange = (e) => {\r\n    setCurrentTask({ ...currentTask, [e.target.name]: e.target.files[0] });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpenEditTask(false);\r\n  };\r\n\r\n  const handleEdit = (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      title.trim() === \"\" ||\r\n      user_minimum_rating === \"\" ||\r\n      status.trim() === \"\"\r\n    ) {\r\n      return window.alert(\"Please fill all fields\");\r\n    }\r\n    if (user_minimum_rating > 5 || user_minimum_rating < 1) {\r\n      return window.alert(\r\n        \"User qualification rating should be between 1 and 5\"\r\n      );\r\n    }\r\n    startLoading();\r\n    let formData = new FormData();\r\n    if (attachment) {\r\n      formData.append(\"attachment\", attachment, attachment.name);\r\n    } else {\r\n      formData.append(\"attachment\", \"\");\r\n    }\r\n\r\n    formData.append(\"user_minimum_rating\", user_minimum_rating);\r\n    formData.append(\"status\", status);\r\n    formData.append(\"title\", title);\r\n    formData.append(\"taskId\", currentTask?.id);\r\n    formData.append(\"instructions\", instructions);\r\n    editOrganization(userId, formData);\r\n  };\r\n\r\n  return (\r\n    <MediumDialog isOpen={openEditTask} maxWidth=\"800px\">\r\n      <form\r\n        className=\"dialog\"\r\n        onSubmit={handleEdit}\r\n        id={loading ? \"formSubmitting\" : \"\"}\r\n      >\r\n        <h3>Edit task details</h3>\r\n        <div className=\"dialog__row\">\r\n          <span>\r\n            <label htmlFor=\"\">Title</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              onChange={handleChange}\r\n              value={title}\r\n            />\r\n          </span>\r\n          <span title=\"The minimum qualification required for workers to work on this task\">\r\n            <label htmlFor=\"\">User Qualification Rating (1 - 5)</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"user_minimum_rating\"\r\n              onChange={handleChange}\r\n              value={user_minimum_rating}\r\n              min=\"1\"\r\n              max=\"5\"\r\n              step=\"0.1\"\r\n            />\r\n          </span>\r\n        </div>\r\n        {loading && (\r\n          <CircularProgress\r\n            style={{ position: \"absolute\", marginLeft: \"43%\" }}\r\n          />\r\n        )}\r\n        <div className=\"dialog__row\">\r\n          <span>\r\n            <label htmlFor=\"\">Task Status</label>\r\n            <select name=\"status\" onChange={handleChange} value={status}>\r\n              <option value=\"\" disabled selected>\r\n                ---select---\r\n              </option>\r\n              <option value=\"draft\">Draft</option>\r\n              <option value=\"available\">Published</option>\r\n            </select>\r\n          </span>\r\n          <span>\r\n            <label htmlFor=\"\">Task Attachment</label>\r\n            <input type=\"file\" name=\"attachment\" onChange={handleFileChange} />\r\n          </span>\r\n        </div>\r\n        <div className=\"dialog__rowSingleItem\">\r\n          <label htmlFor=\"\">Task Instructions</label>\r\n          <Markdown content={instructions} setContent={setInstructions} />\r\n        </div>\r\n        <div className=\"form__Buttons\">\r\n          <button type=\"button\" onClick={handleClose}>\r\n            Close\r\n          </button>\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </MediumDialog>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userId: state.auth.user?.id,\r\n    loading: state.shared?.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    editOrganization: (userId, body) =>\r\n      dispatch(edit_organization_task(userId, body)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditTask);\r\n","// material ui items\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nconst MaxDialog = (props) => {\r\n  return (\r\n    <Dialog\r\n      open={props.isOpen}\r\n      maxWidth=\"lg\"\r\n      style={{ maxWidth: props?.maxWidth, margin: \"auto\" }}\r\n      fullWidth\r\n    >\r\n      {props.children}\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default MaxDialog;\r\n","// import installed packages\r\nimport { useState } from \"react\";\r\n// import styles\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import shared/global items\r\nimport { ifEmpty, resetFormValues } from \"../../../../shared/sharedFunctions\";\r\nimport API from \"../../../../shared/axios\";\r\n// import components/pages\r\nimport MediumDialog from \"../../../../components/common/MediumDialog\";\r\n\r\n// import redux API\r\nimport { showError } from \"../../../../redux/actions/shared\";\r\n\r\nconst RateWork = (props) => {\r\n  const {\r\n    openWorkRating,\r\n    currentTaskSubmissionId,\r\n    userId,\r\n    loading,\r\n    taskSubmissions,\r\n  } = props;\r\n  const { setOpenWorkRating, setTaskSubmissions, startLoading, stopLoading } =\r\n    props;\r\n\r\n  const [workRating, setWorkRating] = useState({\r\n    submission_rating: \"\",\r\n    review_notes: \"\",\r\n    submission_status: \"\",\r\n  });\r\n\r\n  // DESTRUCTURING\r\n  const { submission_rating, review_notes, submission_status } = workRating;\r\n\r\n  const resetForm = () => {\r\n    resetFormValues(workRating);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpenWorkRating(false);\r\n    resetForm();\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setWorkRating({ ...workRating, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // function to handle rating submission\r\n  const rateWorkSubmission = (e) => {\r\n    e.preventDefault();\r\n    if (ifEmpty(workRating)) {\r\n      return window.alert(\"Please fill all fields\");\r\n    }\r\n    startLoading();\r\n    const postData = async () => {\r\n      const url = `/api/work/organization-admin-maintain-task-submissions/${userId}/${currentTaskSubmissionId}/`;\r\n      const body = {\r\n        ...workRating,\r\n      };\r\n\r\n      await API.post(url, body).then((res) => {\r\n        if (submission_status === \"rejected\") {\r\n          // if submission was rejected, remove it from submissions\r\n          setTaskSubmissions(\r\n            taskSubmissions.filter(\r\n              (task_submission) =>\r\n                task_submission.id !== currentTaskSubmissionId\r\n            )\r\n          );\r\n        } else if (submission_status === \"approved\") {\r\n          // if submission was approved, update the status\r\n          setTaskSubmissions(\r\n            taskSubmissions.map((task_submission) =>\r\n              task_submission.id === res.data?.rated_submission?.id\r\n                ? res.data?.rated_submission\r\n                : task_submission\r\n            )\r\n          );\r\n        }\r\n\r\n        window.alert(res.data?.detail);\r\n        setOpenWorkRating(false);\r\n      });\r\n    };\r\n    postData()\r\n      .catch((err) => showError(err))\r\n      .finally(() => stopLoading());\r\n  };\r\n\r\n  return (\r\n    <MediumDialog isOpen={openWorkRating} maxWidth=\"650px\">\r\n      <form\r\n        className=\"dialog\"\r\n        id={loading ? \"formSubmitting\" : \"\"}\r\n        onSubmit={rateWorkSubmission}\r\n      >\r\n        <h3>Rate the work submitted</h3>\r\n        <div className=\"dialog__row\">\r\n          <span>\r\n            <label htmlFor=\"\">Rating (1 - 5)</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"submission_rating\"\r\n              onChange={handleChange}\r\n              value={submission_rating}\r\n              step=\"0.1\"\r\n              min=\"1\"\r\n              max=\"5\"\r\n            />\r\n          </span>\r\n          <span>\r\n            <label htmlFor=\"\">Action</label>\r\n            <select\r\n              name=\"submission_status\"\r\n              onChange={handleChange}\r\n              value={submission_status}\r\n            >\r\n              <option value=\"\" selected disabled>\r\n                Select action\r\n              </option>\r\n              <option value=\"approved\">Accept Work</option>\r\n              <option value=\"rejected\">Reject Work</option>\r\n            </select>\r\n          </span>\r\n        </div>\r\n        {loading && (\r\n          <CircularProgress\r\n            style={{ position: \"absolute\", marginLeft: \"45%\" }}\r\n          />\r\n        )}\r\n        <div className=\"dialog__rowSingleItem\">\r\n          <label htmlFor=\"\">Comments</label>\r\n          <textarea\r\n            name=\"review_notes\"\r\n            onChange={handleChange}\r\n            value={review_notes}\r\n          />\r\n        </div>\r\n        <div className=\"form__Buttons\">\r\n          <button type=\"button\" onClick={handleClose}>\r\n            Close\r\n          </button>\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </MediumDialog>\r\n  );\r\n};\r\n\r\nexport default RateWork;\r\n","// import installed packages\r\nimport { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\n// import styles\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import shared/global items\r\nimport API from \"../../../../shared/axios\";\r\n// import components/pages\r\nimport MaxDialog from \"../../../../components/common/MaxDialog\";\r\n// import redux API\r\nimport { START_LOADING, STOP_LOADING } from \"../../../../redux/actions/types\";\r\nimport { showError, stopLoading } from \"../../../../redux/actions/shared\";\r\nimport RateWork from \"./RateWork\";\r\n\r\nconst TaskSubmissions = (props) => {\r\n  const { openTaskSubmissions, userId, currentTaskId, loading } = props;\r\n  const { setOpenTaskSubmissions, startLoading, stopLoading } = props;\r\n  const [taskSubmissions, setTaskSubmissions] = useState([]);\r\n  const [openWorkRating, setOpenWorkRating] = useState(false);\r\n  const [currentTaskSubmission, setCurrentTaskSubmission] = useState({});\r\n\r\n  useEffect(() => {\r\n    startLoading();\r\n    const fetchData = async () => {\r\n      const url = `/api/work/organization-admin-maintain-task-submissions/${userId}/${currentTaskId}/`;\r\n      await API.get(url).then((res) => {\r\n        setTaskSubmissions(res.data?.task_submissions);\r\n      });\r\n    };\r\n    fetchData()\r\n      .catch((err) => showError(err))\r\n      .finally(() => stopLoading());\r\n  }, [startLoading, stopLoading, userId, currentTaskId]);\r\n\r\n  // function to open work rating\r\n  const openWorkRatingForm = (taskSubmission) => {\r\n    setOpenWorkRating(true);\r\n    setCurrentTaskSubmission(taskSubmission);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <MaxDialog isOpen={openTaskSubmissions} maxWidth=\"1300px\">\r\n        <div className=\"dialog\" id={loading ? \"formSubmitting\" : \"\"}>\r\n          <h3>Task submissions</h3>\r\n          {loading && (\r\n            <CircularProgress\r\n              style={{ position: \"absolute\", marginLeft: \"45%\" }}\r\n            />\r\n          )}\r\n          {taskSubmissions?.length > 0 ? (\r\n            <table className=\"table__listing\">\r\n              <tr className=\"table__listingHeader\">\r\n                <th>No:</th>\r\n                <th>Title</th>\r\n                <th>Date Submitted</th>\r\n                <th>Work Submitted</th>\r\n                <th>Rating</th>\r\n              </tr>\r\n              {taskSubmissions?.map((task_submission, index) => (\r\n                <tr className=\"table__listingItem\">\r\n                  <td>{index + 1}</td>\r\n                  <td>{task_submission?.task}</td>\r\n                  <td>{moment(task_submission?.submitted_on).format(\"LLL\")}</td>\r\n                  <td>\r\n                    <Link\r\n                      to={`${task_submission?.attachment}`}\r\n                      className=\"button dodgerblue bd\"\r\n                      target=\"_blank\"\r\n                    >\r\n                      View\r\n                    </Link>\r\n                  </td>\r\n                  {task_submission?.submission_rating ? (\r\n                    <td>{task_submission?.submission_rating}</td>\r\n                  ) : (\r\n                    <td\r\n                      className=\"button__sp dodgerblue bd\"\r\n                      onClick={() => openWorkRatingForm(task_submission)}\r\n                    >\r\n                      Rate Work\r\n                    </td>\r\n                  )}\r\n                </tr>\r\n              ))}\r\n            </table>\r\n          ) : (\r\n            <h4 className=\"not__available\">No task submissions yet</h4>\r\n          )}\r\n          <div className=\"form__Buttons\">\r\n            <button type=\"button\" onClick={() => setOpenTaskSubmissions(false)}>\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </MaxDialog>\r\n      {/* child components */}\r\n      {openTaskSubmissions && (\r\n        <RateWork\r\n          setOpenWorkRating={setOpenWorkRating}\r\n          openWorkRating={openWorkRating}\r\n          currentTaskSubmissionId={currentTaskSubmission?.id}\r\n          setTaskSubmissions={setTaskSubmissions}\r\n          taskSubmissions={taskSubmissions}\r\n          stopLoading={stopLoading}\r\n          startLoading={startLoading}\r\n          userId={userId}\r\n          loading={loading}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userId: state.auth.user?.id,\r\n    loading: state.shared?.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    stopLoading: () => dispatch({ type: STOP_LOADING }),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskSubmissions);\r\n","// import installed packages\r\nimport { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n// import styles\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\n// import shared/global items\r\n// import components/pages\r\nimport AddTask from \"./components/AddTask\";\r\nimport EditTask from \"./components/EditTask\";\r\n// import redux API\r\nimport { START_LOADING } from \"../../../redux/actions/types\";\r\nimport { get_all_tasks } from \"../../../redux/actions/work\";\r\nimport TaskSubmissions from \"./components/TaskSubmissions\";\r\n\r\nconst MaintainTasks = (props) => {\r\n  const { loading, organizationTasks, userId } = props;\r\n  const { startLoading, getAllTasks } = props;\r\n  const [openAddTask, setOpenAddTask] = useState(false);\r\n  const [openEditTask, setOpenEditTask] = useState(false);\r\n  const [currentTask, setCurrentTask] = useState({});\r\n  const [openTaskSubmissions, setOpenTaskSubmissions] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (organizationTasks?.length === 0 && userId) {\r\n      startLoading();\r\n      getAllTasks(userId);\r\n    }\r\n  }, [userId, startLoading, organizationTasks?.length, getAllTasks]);\r\n\r\n  const openEditTaskForm = (task) => {\r\n    setOpenEditTask(true);\r\n    setCurrentTask(task);\r\n  };\r\n\r\n  // open submissions form\r\n  const openTaskSubmissionsForm = (task) => {\r\n    setOpenTaskSubmissions(true);\r\n    setCurrentTask(task);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"table__parent\">\r\n        <div className=\"table__parentHeader\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"add__button\"\r\n            onClick={() => setOpenAddTask(true)}\r\n          >\r\n            Add\r\n          </button>\r\n          <h3> Maintain Tasks here</h3>\r\n          {loading && <CircularProgress style={{ position: \"absolute\" }} />}\r\n        </div>\r\n        <table className=\"table__listing\">\r\n          {organizationTasks?.length > 0 ? (\r\n            <>\r\n              <tr className=\"table__listingHeader\">\r\n                <th>No:</th>\r\n                <th>Title</th>\r\n                <th>Edit</th>\r\n                <th>Task Attachment</th>\r\n                <th>Payment Status</th>\r\n                <th>Submissions</th>\r\n              </tr>\r\n              {organizationTasks?.map((task, index) => (\r\n                <tr className=\"table__listingItem\">\r\n                  <td>{index + 1}</td>\r\n                  <td>{task?.title}</td>\r\n                  <td\r\n                    className=\"dodgerblue bd button__sp\"\r\n                    onClick={() => openEditTaskForm(task)}\r\n                  >\r\n                    edit\r\n                  </td>\r\n                  <td>\r\n                    <Link\r\n                      to={`${task?.attachment}`}\r\n                      className=\"button dodgerblue bd\"\r\n                      target=\"_blank\"\r\n                    >\r\n                      view\r\n                    </Link>\r\n                  </td>\r\n                  <td>\r\n                    {task?.payment_status === null ? (\r\n                      <a\r\n                        href={`/accounting/make-payment/${task?.id}/${\r\n                          task?.amount\r\n                        }/${Math.floor(Math.random() * 10000000)}/`}\r\n                        className=\"red bd button\"\r\n                      >\r\n                        Pay\r\n                      </a>\r\n                    ) : task?.payment_status === \"paid\" ? (\r\n                      <span className=\"green bd button\">Paid</span>\r\n                    ) : (\r\n                      task?.pesapal && (\r\n                        <a\r\n                          href={`/pesapal/transaction/completed/?pesapal_merchant_reference=${task?.pesapal_transaction?.pesapal_merchant_reference}&pesapal_transaction_tracking_id=${task?.pesapal_transaction?.pesapal_transaction_tracking_id}`}\r\n                          className=\"dodgerblue bd button__sp\"\r\n                        >\r\n                          Confirm Payment\r\n                        </a>\r\n                      )\r\n                    )}\r\n                  </td>\r\n                  <td\r\n                    className=\"button__sp dodgerblue bd\"\r\n                    onClick={() => openTaskSubmissionsForm(task)}\r\n                  >\r\n                    View\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </>\r\n          ) : (\r\n            <h4 className=\"not__available\">No tasks available</h4>\r\n          )}\r\n        </table>\r\n      </div>\r\n      {/* child components */}\r\n      {openAddTask && (\r\n        <AddTask openAddTask={openAddTask} setOpenAddTask={setOpenAddTask} />\r\n      )}\r\n      {openEditTask && (\r\n        <EditTask\r\n          openEditTask={openEditTask}\r\n          setOpenEditTask={setOpenEditTask}\r\n          currentTask={currentTask}\r\n          setCurrentTask={setCurrentTask}\r\n        />\r\n      )}\r\n      {openTaskSubmissions && (\r\n        <TaskSubmissions\r\n          openTaskSubmissions={openTaskSubmissions}\r\n          setOpenTaskSubmissions={setOpenTaskSubmissions}\r\n          currentTaskId={currentTask?.id}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userId: state.auth.user?.id,\r\n    loading: state.shared?.loading,\r\n    organizationTasks: state.work?.organization_tasks,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    getAllTasks: (userId) => dispatch(get_all_tasks(userId)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MaintainTasks);\r\n","// import installed packages\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\n// import styles\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import shared/global items\r\n// import components/pages\r\nimport MediumDialog from \"../../../../components/common/MediumDialog\";\r\n\r\n// import redux API\r\nimport { START_LOADING } from \"../../../../redux/actions/types\";\r\nimport { edit_worker_or_application } from \"../../../../redux/actions/work\";\r\n\r\nconst EditWorkerApplication = (props) => {\r\n  const {\r\n    openEditWorkerApplication,\r\n    currentWorkerApplication,\r\n    loading,\r\n    userId,\r\n  } = props;\r\n  const {\r\n    setOpenEditWorkerApplication,\r\n    setCurrentWorkerApplication,\r\n    startLoading,\r\n    editWorkerOrApplication,\r\n  } = props;\r\n\r\n  // DESTRUCTURING\r\n  const {\r\n    id,\r\n    full_name,\r\n    occupation,\r\n    mpesa_number,\r\n    national_id,\r\n    applied_on,\r\n    status,\r\n    about_worker,\r\n    rejection_reason,\r\n  } = currentWorkerApplication;\r\n\r\n  const handleChange = (e) => {\r\n    setCurrentWorkerApplication({\r\n      ...currentWorkerApplication,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpenEditWorkerApplication(false);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      status === \"rejected\" &&\r\n      (rejection_reason === \"\" || rejection_reason === null)\r\n    ) {\r\n      return window.alert(\"You must indicate the rejection reason\");\r\n    }\r\n    const body = {\r\n      applicationId: id,\r\n      rejection_reason,\r\n      status,\r\n      worker_or_application: \"application\",\r\n    };\r\n    startLoading();\r\n    editWorkerOrApplication(userId, body);\r\n  };\r\n\r\n  return (\r\n    <MediumDialog isOpen={openEditWorkerApplication} maxWidth=\"800px\">\r\n      <form\r\n        className=\"dialog\"\r\n        onSubmit={handleSubmit}\r\n        id={loading ? \"formSubmitting\" : \"\"}\r\n      >\r\n        <h3>Application details</h3>\r\n        <div className=\"dialog__row\">\r\n          <span>\r\n            <label htmlFor=\"\">Name</label>\r\n            <input type=\"text\" value={full_name} disabled readOnly />\r\n          </span>\r\n          <span>\r\n            <label htmlFor=\"\">Occupation</label>\r\n            <input type=\"text\" value={occupation} disabled readOnly />\r\n          </span>\r\n        </div>\r\n        <div className=\"dialog__row\">\r\n          <span>\r\n            <label htmlFor=\"\">Mpesa Number</label>\r\n            <input type=\"text\" value={mpesa_number} disabled readOnly />\r\n          </span>\r\n          <span>\r\n            <label htmlFor=\"\">National ID</label>\r\n            <input type=\"text\" value={national_id} disabled readOnly />\r\n          </span>\r\n        </div>\r\n        <div className=\"dialog__row\">\r\n          <span>\r\n            <label htmlFor=\"\">Applied On</label>\r\n            <input\r\n              type=\"text\"\r\n              value={moment(applied_on).format(\"LLL\")}\r\n              disabled\r\n              readOnly\r\n            />\r\n          </span>\r\n          <span>\r\n            <label htmlFor=\"\">Status</label>\r\n            <select name=\"status\" value={status} onChange={handleChange}>\r\n              <option value=\"approved\">Approved</option>\r\n              <option value=\"pending\">Pending</option>\r\n              <option value=\"rejected\">Rejected</option>\r\n            </select>\r\n          </span>\r\n        </div>\r\n        {loading && (\r\n          <CircularProgress\r\n            style={{ position: \"absolute\", marginLeft: \"43%\" }}\r\n          />\r\n        )}\r\n        <div className=\"dialog__rowSingleItem\">\r\n          <label htmlFor=\"\">About User</label>\r\n          <textarea value={about_worker} disabled readOnly />\r\n        </div>\r\n        {status === \"rejected\" && (\r\n          <div className=\"dialog__rowSingleItem\">\r\n            <label htmlFor=\"\">Rejection Reason</label>\r\n            <textarea\r\n              name=\"rejection_reason\"\r\n              value={rejection_reason}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n        )}\r\n        <div className=\"form__Buttons\">\r\n          <button type=\"button\" onClick={handleClose}>\r\n            Close\r\n          </button>\r\n          <button type=\"submit\">Update</button>\r\n        </div>\r\n      </form>\r\n    </MediumDialog>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userId: state.auth.user?.id,\r\n    loading: state.shared?.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    editWorkerOrApplication: (userId, body) =>\r\n      dispatch(edit_worker_or_application(userId, body)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(EditWorkerApplication);\r\n","// import installed packages\r\n\r\nimport { connect } from \"react-redux\";\r\n// import styles\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import shared/global items\r\n// import components/pages\r\nimport MinDialog from \"../../../../components/common/MinDialog\";\r\n// import redux API\r\nimport { START_LOADING } from \"../../../../redux/actions/types\";\r\nimport { edit_worker_or_application } from \"../../../../redux/actions/work\";\r\n\r\nconst EditWorker = (props) => {\r\n  const { openEditWorker, currentWorker, userId, loading } = props;\r\n  const {\r\n    setOpenEditWorker,\r\n    setCurrentWorker,\r\n    startLoading,\r\n    editWorkerOrApplication,\r\n  } = props;\r\n\r\n  const handleChange = (e) => {\r\n    setCurrentWorker({ ...currentWorker, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      currentWorker?.profile_status === \"disabled\" &&\r\n      (currentWorker?.disabled_notes?.trim() === \"\" ||\r\n        currentWorker?.disabled_notes === null)\r\n    ) {\r\n      return window.alert(\r\n        \"Please indicate reason for disabling worker account\"\r\n      );\r\n    } else if (\r\n      currentWorker?.profile_status === \"suspended\" &&\r\n      (currentWorker?.suspension_notes?.trim() === \"\" ||\r\n        currentWorker?.suspension_notes === null)\r\n    ) {\r\n      return window.alert(\r\n        \"Please indicate reason for suspending worker account\"\r\n      );\r\n    }\r\n    const body = {\r\n      workerId: currentWorker?.id,\r\n      profile_status: currentWorker?.profile_status,\r\n      worker_or_application: \"worker\",\r\n      suspension_notes: currentWorker?.suspension_notes,\r\n      disabled_notes: currentWorker?.disabled_notes,\r\n    };\r\n    startLoading();\r\n    editWorkerOrApplication(userId, body);\r\n  };\r\n\r\n  return (\r\n    <MinDialog isOpen={openEditWorker} maxWidth=\"600px\">\r\n      <form\r\n        className=\"dialog\"\r\n        onSubmit={handleSubmit}\r\n        id={loading ? \"formSubmitting\" : \"\"}\r\n      >\r\n        <h3>Update Worker</h3>\r\n        {loading && (\r\n          <CircularProgress\r\n            style={{ position: \"absolute\", marginLeft: \"43%\" }}\r\n          />\r\n        )}\r\n        <div className=\"dialog__rowSingleItem\">\r\n          <label htmlFor=\"\">Worker Status</label>\r\n          <select\r\n            name=\"profile_status\"\r\n            value={currentWorker?.profile_status}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=\"active\">Active</option>\r\n            <option value=\"disabled\">Disabled</option>\r\n            <option value=\"suspended\">Suspended</option>\r\n          </select>\r\n        </div>\r\n        {currentWorker?.profile_status === \"disabled\" && (\r\n          <div className=\"dialog__rowSingleItem\">\r\n            <label htmlFor=\"\">Reason for disabling worker</label>\r\n            <textarea\r\n              name=\"disabled_notes\"\r\n              onChange={handleChange}\r\n              value={currentWorker?.disabled_notes}\r\n            />\r\n          </div>\r\n        )}\r\n        {currentWorker?.profile_status === \"suspended\" && (\r\n          <div className=\"dialog__rowSingleItem\">\r\n            <label htmlFor=\"\">Reason for suspending worker</label>\r\n            <textarea\r\n              name=\"suspension_notes\"\r\n              onChange={handleChange}\r\n              value={currentWorker?.suspension_notes}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"form__Buttons\">\r\n          <button type=\"button\" onClick={() => setOpenEditWorker(false)}>\r\n            Close\r\n          </button>\r\n          <button type=\"submit\">Update</button>\r\n        </div>\r\n      </form>\r\n    </MinDialog>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userId: state.auth.user?.id,\r\n    loading: state.shared?.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    editWorkerOrApplication: (userId, body) =>\r\n      dispatch(edit_worker_or_application(userId, body)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditWorker);\r\n","// import installed packages\r\nimport { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\n\r\n// import styles\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import shared/global items\r\n// import components/pages\r\n// import redux API\r\nimport { START_LOADING } from \"../../../redux/actions/types\";\r\nimport { get_workers } from \"../../../redux/actions/work\";\r\nimport EditWorkerApplication from \"./components/EditWorkerApplication\";\r\nimport EditWorker from \"./components/EditWorker\";\r\n\r\nconst MaintainWorkers = (props) => {\r\n  const { workers, workers_applications, userId, loading } = props;\r\n  const { startLoading, getWorkers } = props;\r\n  const [openEditWorkerApplication, setOpenEditWorkerApplication] =\r\n    useState(false);\r\n  const [currentWorkerApplication, setCurrentWorkerApplication] = useState({});\r\n  const [currentWorker, setCurrentWorker] = useState({});\r\n  const [openEditWorker, setOpenEditWorker] = useState(false);\r\n\r\n  // useEffect to get all workers and applications\r\n  useEffect(() => {\r\n    if (workers_applications?.length === 0 && userId) {\r\n      startLoading();\r\n      getWorkers(userId);\r\n    }\r\n  }, [getWorkers, startLoading, userId, workers_applications?.length]);\r\n\r\n  // open edit worker application\r\n  const openEditWorkerApplicationForm = (worker_application) => {\r\n    setOpenEditWorkerApplication(true);\r\n    setCurrentWorkerApplication(worker_application);\r\n  };\r\n\r\n  // open edit worker\r\n  const openEditWorkerForm = (worker) => {\r\n    setCurrentWorker(worker);\r\n    setOpenEditWorker(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"table__parent\">\r\n        <div className=\"table__parentHeader\">\r\n          <h3>Workers</h3>\r\n          {loading && <CircularProgress style={{ position: \"absolute\" }} />}\r\n        </div>\r\n        <table className=\"table__listing\">\r\n          {workers?.length > 0 ? (\r\n            <>\r\n              <tr className=\"table__listingHeader\">\r\n                <th>No:</th>\r\n                <th>Name</th>\r\n                <th>Status</th>\r\n                <th>Update</th>\r\n              </tr>\r\n              {workers?.map((worker, index) => (\r\n                <tr className=\"table__listingItem\">\r\n                  <td>{index + 1}</td>\r\n                  <td>{worker?.full_name}</td>\r\n                  <td>{worker?.profile_status}</td>\r\n                  <td\r\n                    className=\"dodgerblue bd button__sp\"\r\n                    onClick={() => openEditWorkerForm(worker)}\r\n                  >\r\n                    edit\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </>\r\n          ) : (\r\n            <h4 className=\"not__available\">No workers yet</h4>\r\n          )}\r\n        </table>\r\n        <div className=\"table__parentHeader\">\r\n          <h3>Workers applications</h3>\r\n        </div>\r\n        <table className=\"table__listing\">\r\n          {workers_applications?.length > 0 ? (\r\n            <>\r\n              <tr className=\"table__listingHeader\">\r\n                <th>No:</th>\r\n                <th>Name</th>\r\n                <th>Applied On</th>\r\n                <th>Action</th>\r\n              </tr>\r\n              {workers_applications?.map((worker_application, index) => (\r\n                <tr className=\"table__listingItem\" key={worker_application?.id}>\r\n                  <td>{index + 1}</td>\r\n                  <td>{worker_application?.full_name}</td>\r\n                  <td>{moment(worker_application.applied_on).format(\"LLL\")}</td>\r\n                  {worker_application?.status !== \"approved\" ? (\r\n                    <td\r\n                      className=\"button__sp dodgerblue bd\"\r\n                      onClick={() =>\r\n                        openEditWorkerApplicationForm(worker_application)\r\n                      }\r\n                    >\r\n                      process\r\n                    </td>\r\n                  ) : (\r\n                    <td>Approved</td>\r\n                  )}\r\n                </tr>\r\n              ))}\r\n            </>\r\n          ) : (\r\n            <h4 className=\"not__available\">No workers applications yet</h4>\r\n          )}\r\n        </table>\r\n      </div>\r\n      {/* child components */}\r\n      {openEditWorkerApplication && (\r\n        <EditWorkerApplication\r\n          openEditWorkerApplication={openEditWorkerApplication}\r\n          setOpenEditWorkerApplication={setOpenEditWorkerApplication}\r\n          currentWorkerApplication={currentWorkerApplication}\r\n          setCurrentWorkerApplication={setCurrentWorkerApplication}\r\n        />\r\n      )}\r\n      {openEditWorker && (\r\n        <EditWorker\r\n          openEditWorker={openEditWorker}\r\n          setOpenEditWorker={setOpenEditWorker}\r\n          currentWorker={currentWorker}\r\n          setCurrentWorker={setCurrentWorker}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    workers: state.work?.workers,\r\n    workers_applications: state.work?.workers_applications,\r\n    loading: state.shared?.loading,\r\n    userId: state.auth.user.id,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    getWorkers: (userId) => dispatch(get_workers(userId)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MaintainWorkers);\r\n","// import installed packages\r\nimport parse from \"html-react-parser\";\r\n// import styles\r\n// import material ui items\r\n// import shared/global items\r\n// import components/pages\r\nimport MediumDialog from \"../../../../../components/common/MediumDialog\";\r\n// import redux API\r\n\r\nconst Instructions = (props) => {\r\n  const { openInstructions, currentTask, setOpenInstructions } = props;\r\n  return (\r\n    <MediumDialog isOpen={openInstructions} maxWidth=\"1000px\">\r\n      <div className=\"dialog\">\r\n        <h3>Task Instructions</h3>\r\n        <div>{parse(`${currentTask?.instructions}`)}</div>\r\n        <div className=\"form__Buttons\">\r\n          <button type=\"button\" onClick={() => setOpenInstructions(false)}>\r\n            Close\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </MediumDialog>\r\n  );\r\n};\r\n\r\nexport default Instructions;\r\n","// import installed packages\r\nimport { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n// import styles\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import shared/global items\r\nimport API from \"../../../../shared/axios\";\r\n// import components/pages\r\nimport MaxDialog from \"../../../../components/common/MaxDialog\";\r\nimport Instructions from \"./components/Instructions\";\r\n// import redux API\r\nimport { START_LOADING, STOP_LOADING } from \"../../../../redux/actions/types\";\r\nimport { showError } from \"../../../../redux/actions/shared\";\r\n\r\nconst TasksAvailable = (props) => {\r\n  const { openTasksAvailable, userId, loading } = props;\r\n  const { setOpenTasksAvailable, startLoading, stopLoading } = props;\r\n  const [availableTasks, setAvailableTasks] = useState([]);\r\n\r\n  const [openInstructions, setOpenInstructions] = useState(false);\r\n  const [currentTask, setCurrentTask] = useState({});\r\n  const [checkTasks, setCheckTasks] = useState(true);\r\n\r\n  // useEffect to get available tasks\r\n  useEffect(() => {\r\n    if (userId && checkTasks) {\r\n      startLoading();\r\n      const fetchData = async () => {\r\n        const url = `/api/work/worker-tasks-available/${userId}/`;\r\n        await API.get(url).then((res) => {\r\n          setAvailableTasks(res.data?.available_tasks);\r\n        });\r\n      };\r\n      fetchData()\r\n        .catch((err) => showError(err))\r\n        .finally(() => {\r\n          setCheckTasks(false);\r\n          stopLoading();\r\n        });\r\n    }\r\n  }, [startLoading, stopLoading, userId, checkTasks]);\r\n\r\n  // function to get tasks available\r\n  const getTasks = () => {\r\n    setCheckTasks(true);\r\n  };\r\n\r\n  const handleOpenInstructions = (task) => {\r\n    setCurrentTask(task);\r\n    setOpenInstructions(true);\r\n  };\r\n\r\n  // function to accept task\r\n  const acceptTask = (e, taskId) => {\r\n    e.preventDefault();\r\n    if (window.confirm(`Accept this task and start working`)) {\r\n      startLoading();\r\n      const postData = async () => {\r\n        const url = `/api/work/worker-tasks-available/${userId}/`;\r\n        const body = {\r\n          taskId,\r\n        };\r\n        await API.post(url, body).then((res) => {\r\n          // remove taken task from available tasks\r\n          setAvailableTasks(\r\n            availableTasks.filter((task) => task.id !== res.data?.taskId)\r\n          );\r\n          return window.alert(res.data?.detail);\r\n        });\r\n      };\r\n      postData()\r\n        .catch((err) => showError(err))\r\n        .finally(() => stopLoading());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <MaxDialog isOpen={openTasksAvailable} maxWidth=\"1200px\">\r\n        <div className=\"dialog\" id={loading ? \"pageSubmitting\" : \"\"}>\r\n          <h3>Tasks available</h3>\r\n          {loading && (\r\n            <CircularProgress\r\n              style={{ position: \"absolute\", marginLeft: \"45%\" }}\r\n            />\r\n          )}\r\n          {availableTasks?.length > 0 ? (\r\n            <table className=\"table__listing\">\r\n              <tr className=\"table__listingHeader\">\r\n                <th>No:</th>\r\n                <th>Title</th>\r\n                <th>Wage (KES)</th>\r\n                <th>Instructions</th>\r\n                <th>Attachment</th>\r\n                <th>Action</th>\r\n              </tr>\r\n              {availableTasks?.map((task, index) => (\r\n                <tr className=\"table__listingItem\" key={task?.id}>\r\n                  <td>{index + 1}</td>\r\n                  <td>{task?.title}</td>\r\n                  <td>{task?.amount}</td>\r\n                  <td\r\n                    className=\"button dodgerblue bd\"\r\n                    onClick={() => handleOpenInstructions(task)}\r\n                  >\r\n                    view\r\n                  </td>\r\n                  <td>\r\n                    <Link\r\n                      to={`${task?.attachment}`}\r\n                      className=\"button dodgerblue bd\"\r\n                      target=\"_blank\"\r\n                    >\r\n                      Open\r\n                    </Link>\r\n                  </td>\r\n                  <td\r\n                    className=\"dodgerblue bd button\"\r\n                    onClick={(e) => acceptTask(e, task?.id)}\r\n                  >\r\n                    Accept\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </table>\r\n          ) : (\r\n            <h4 className=\"not__available\">No tasks available</h4>\r\n          )}\r\n          <div className=\"form__Buttons\">\r\n            <button type=\"button\" onClick={() => setOpenTasksAvailable(false)}>\r\n              Close\r\n            </button>\r\n            <button type=\"button\" onClick={getTasks}>\r\n              Refresh\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </MaxDialog>\r\n      {openInstructions && (\r\n        <Instructions\r\n          openInstructions={openInstructions}\r\n          setOpenInstructions={setOpenInstructions}\r\n          currentTask={currentTask}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userId: state.auth.user?.id,\r\n    loading: state.shared?.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    stopLoading: () => dispatch({ type: STOP_LOADING }),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksAvailable);\r\n","// import installed packages\r\nimport { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\n// import styles\r\nimport \"./TasksOngoing.scss\";\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import shared/global items\r\nimport API from \"../../../../shared/axios\";\r\n// import components/pages\r\nimport MaxDialog from \"../../../../components/common/MaxDialog\";\r\n// import redux API\r\nimport { START_LOADING, STOP_LOADING } from \"../../../../redux/actions/types\";\r\nimport { showError } from \"../../../../redux/actions/shared\";\r\n\r\nconst TasksOngoing = (props) => {\r\n  const { openTasksOngoing, userId, loading } = props;\r\n  const { setOpenTasksOngoing, startLoading, stopLoading } = props;\r\n  const [ongoingTasks, setOngoingTasks] = useState([]);\r\n  const [taskAttachment, setTaskAttachment] = useState(\"\");\r\n\r\n  // useEffect to get available tasks\r\n  useEffect(() => {\r\n    if (userId) {\r\n      startLoading();\r\n      const fetchData = async () => {\r\n        const url = `/api/work/worker-tasks-ongoing/${userId}/`;\r\n        await API.get(url).then((res) => {\r\n          setOngoingTasks(res.data?.ongoing_tasks);\r\n        });\r\n      };\r\n      fetchData()\r\n        .catch((err) => showError(err))\r\n        .finally(() => stopLoading());\r\n    }\r\n  }, [startLoading, stopLoading, userId]);\r\n\r\n  const handleFileChange = (e) => {\r\n    setTaskAttachment(e.target.files[0]);\r\n  };\r\n\r\n  // function to handle work submission\r\n  const handleSubmit = (e, taskId) => {\r\n    e.preventDefault();\r\n    if (taskAttachment === \"\") {\r\n      return window.alert(`Please attach a valid file`);\r\n    }\r\n    startLoading();\r\n    const postData = async () => {\r\n      const url = `/api/work/worker-tasks-ongoing/${userId}/`;\r\n      let body = new FormData();\r\n      body.append(\"attachment\", taskAttachment, taskAttachment.name);\r\n      body.append(\"taskId\", taskId);\r\n      await API.post(url, body).then((res) => {\r\n        setOngoingTasks(\r\n          ongoingTasks?.filter((task) => task.id !== res.data?.taskId)\r\n        );\r\n        return window.alert(res.data?.detail);\r\n      });\r\n    };\r\n    postData()\r\n      .catch((err) => showError(err))\r\n      .finally(() => stopLoading());\r\n  };\r\n\r\n  // function to handle returning a task\r\n  const handleReturnTask = async (taskSubmissionId) => {\r\n    if (window.confirm(\"Are you sure you want to return this task?\")) {\r\n      const url = `/api/work/worker-tasks-ongoing/${userId}/`;\r\n      startLoading();\r\n      await API.patch(url, { taskSubmissionId })\r\n        .then((res) => {\r\n          setOngoingTasks(\r\n            ongoingTasks?.filter(\r\n              (ongoing_task) => ongoing_task?.id !== taskSubmissionId\r\n            )\r\n          );\r\n          window.alert(res.data?.detail);\r\n        })\r\n        .catch((err) => showError(err))\r\n        .finally(() => stopLoading());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MaxDialog isOpen={openTasksOngoing} maxWidth=\"1400px\">\r\n      <div className=\"dialog\" id={loading ? \"pageSubmitting\" : \"\"}>\r\n        <h3>Tasks Ongoing</h3>\r\n        {loading && (\r\n          <CircularProgress\r\n            style={{ position: \"absolute\", marginLeft: \"45%\" }}\r\n          />\r\n        )}\r\n        {ongoingTasks?.length > 0 ? (\r\n          <table className=\"table__listing\">\r\n            <tr className=\"table__listingHeader\">\r\n              <th>No:</th>\r\n              <th>Title</th>\r\n              <th>Taken On</th>\r\n              <th>Status</th>\r\n              <th>Requirements</th>\r\n              <th>Submit Work</th>\r\n              <th title=\"return if unable to complete task\">Return Task ?</th>\r\n            </tr>\r\n            {ongoingTasks?.map((ongoing_task, index) => (\r\n              <tr className=\"table__listingItem\">\r\n                <td>{index + 1}</td>\r\n                <td>{ongoing_task?.task}</td>\r\n                <td>{moment(ongoing_task?.taken_on).format(\"LLL\")}</td>\r\n                <td>{ongoing_task?.submission_status}</td>\r\n                <td>\r\n                  <Link\r\n                    to={`${ongoing_task?.attachment}`}\r\n                    className=\"button dodgerblue bd\"\r\n                    target=\"_blank\"\r\n                  >\r\n                    Open\r\n                  </Link>\r\n                </td>\r\n                <td className=\"task__submissionForm\">\r\n                  <form onSubmit={(e) => handleSubmit(e, ongoing_task?.id)}>\r\n                    <input type=\"file\" name=\"\" onChange={handleFileChange} />\r\n                    <button type=\"submit\" className=\"add__button\">\r\n                      Submit\r\n                    </button>\r\n                  </form>\r\n                </td>\r\n                <td\r\n                  className=\"button__sp red bd\"\r\n                  onClick={() => handleReturnTask(ongoing_task?.id)}\r\n                >\r\n                  Return\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </table>\r\n        ) : (\r\n          <h4 className=\"not__available\">No ongoing tasks</h4>\r\n        )}\r\n        <div className=\"form__Buttons\">\r\n          <button type=\"button\" onClick={() => setOpenTasksOngoing(false)}>\r\n            Close\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </MaxDialog>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userId: state.auth.user?.id,\r\n    loading: state.shared?.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    stopLoading: () => dispatch({ type: STOP_LOADING }),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksOngoing);\r\n","// import installed packages\r\n// import styles\r\n// import material ui items\r\n// import shared/global items\r\n// import components/pages\r\nimport MinDialog from \"../../../../../components/common/MinDialog\";\r\n// import redux API\r\n\r\nconst ReviewNotes = (props) => {\r\n  const { openReviewNotes, setOpenReviewNotes, currentReviewNotes } = props;\r\n  return (\r\n    <MinDialog isOpen={openReviewNotes}>\r\n      <div className=\"dialog\">\r\n        <h3>Review notes for this task</h3>\r\n        <br />\r\n        <textarea name=\"\" value={currentReviewNotes} disabled readOnly />\r\n        <div className=\"form__Buttons\">\r\n          <button type=\"button\" onClick={() => setOpenReviewNotes(false)}>\r\n            Close\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </MinDialog>\r\n  );\r\n};\r\n\r\nexport default ReviewNotes;\r\n","// import installed packages\r\nimport { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\n// import styles\r\n// import material ui items\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n// import shared/global items\r\nimport API from \"../../../../shared/axios\";\r\n// import components/pages\r\nimport MaxDialog from \"../../../../components/common/MaxDialog\";\r\n// import redux API\r\nimport { showError } from \"../../../../redux/actions/shared\";\r\nimport { START_LOADING, STOP_LOADING } from \"../../../../redux/actions/types\";\r\nimport ReviewNotes from \"./components/ReviewNotes\";\r\n\r\nconst TasksSubmitted = (props) => {\r\n  const { openTasksSubmitted, userId, loading } = props;\r\n  const { setOpenTasksSubmitted, startLoading, stopLoading } = props;\r\n  const [submittedTasks, setSubmittedTasks] = useState([]);\r\n  const [openReviewNotes, setOpenReviewNotes] = useState(false);\r\n  const [currentReviewNotes, setCurrentReviewNotes] = useState(\"\");\r\n\r\n  // useEffect to get available tasks\r\n  useEffect(() => {\r\n    if (userId) {\r\n      startLoading();\r\n      const fetchData = async () => {\r\n        const url = `/api/work/worker-tasks-submitted/${userId}/`;\r\n        await API.get(url).then((res) => {\r\n          setSubmittedTasks(res.data?.submitted_tasks);\r\n        });\r\n      };\r\n      fetchData()\r\n        .catch((err) => showError(err))\r\n        .finally(() => stopLoading());\r\n    }\r\n  }, [startLoading, stopLoading, userId]);\r\n\r\n  // function to open review notes\r\n  const openReviewNotesForm = (review) => {\r\n    setOpenReviewNotes(true);\r\n    setCurrentReviewNotes(review);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <MaxDialog isOpen={openTasksSubmitted} maxWidth=\"1300px\">\r\n        <div className=\"dialog\">\r\n          <h3>Tasks Submitted</h3>\r\n          {loading && (\r\n            <CircularProgress\r\n              style={{ position: \"absolute\", marginLeft: \"45%\" }}\r\n            />\r\n          )}\r\n          {submittedTasks?.length > 0 ? (\r\n            <table className=\"table__listing\">\r\n              <tr className=\"table__listingHeader\">\r\n                <th>No:</th>\r\n                <th>Title</th>\r\n                <th>Date Submitted</th>\r\n                <th>Status</th>\r\n                <th>Rating</th>\r\n                <th>Review Notes</th>\r\n              </tr>\r\n              {submittedTasks?.map((submitted_task, index) => (\r\n                <tr className=\"table__listingItem\">\r\n                  <td>{index + 1}</td>\r\n                  <td>{submitted_task?.task}</td>\r\n                  <td>{moment(submitted_task?.submitted_on).format(\"LLL\")}</td>\r\n                  <td>{submitted_task?.submission_status}</td>\r\n                  <td>{submitted_task?.submission_rating}</td>\r\n                  <td\r\n                    className=\"button dodgerblue bd\"\r\n                    onClick={() =>\r\n                      openReviewNotesForm(submitted_task?.review_notes)\r\n                    }\r\n                  >\r\n                    view\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </table>\r\n          ) : (\r\n            <h4 className=\"not__available\">No submitted tasks</h4>\r\n          )}\r\n          <div className=\"form__Buttons\">\r\n            <button type=\"button\" onClick={() => setOpenTasksSubmitted(false)}>\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </MaxDialog>\r\n      {openReviewNotes && (\r\n        <ReviewNotes\r\n          openReviewNotes={openReviewNotes}\r\n          setOpenReviewNotes={setOpenReviewNotes}\r\n          currentReviewNotes={currentReviewNotes}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userId: state.auth.user?.id,\r\n    loading: state.shared?.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    startLoading: () => dispatch({ type: START_LOADING }),\r\n    stopLoading: () => dispatch({ type: STOP_LOADING }),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksSubmitted);\r\n","// import installed packages\r\nimport { useState } from \"react\";\r\nimport TasksAvailable from \"../components/TasksAvailable/TasksAvailable\";\r\nimport TasksOngoing from \"../components/TasksOngoing/TasksOngoing\";\r\nimport TasksSubmitted from \"../components/TasksSubmitted/TasksSubmitted\";\r\n// import styles\r\nimport \"./WorkCenter.scss\";\r\n// import material ui items\r\n// import shared/global items\r\n// import components/pages\r\n// import redux API\r\n\r\nconst WorkCenter = () => {\r\n  const [openTasksAvailable, setOpenTasksAvailable] = useState(false);\r\n  const [openTasksOngoing, setOpenTasksOngoing] = useState(false);\r\n  const [openTasksSubmitted, setOpenTasksSubmitted] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"table__parent\">\r\n        <div className=\"table__parentHeader\">\r\n          <h3>Your Work Center</h3>\r\n        </div>\r\n        <table className=\"table__listing\">\r\n          <tr className=\"table__listingHeader\">\r\n            <th>Type</th>\r\n            <th>Action</th>\r\n          </tr>\r\n          <tr className=\"table__listingItem\">\r\n            <td>Tasks Available</td>\r\n            <td\r\n              className=\"button dodgerblue bd\"\r\n              onClick={() => setOpenTasksAvailable(true)}\r\n            >\r\n              View\r\n            </td>\r\n          </tr>\r\n          <tr className=\"table__listingItem\">\r\n            <td>Ongoing Tasks</td>\r\n            <td\r\n              className=\"button dodgerblue bd\"\r\n              onClick={() => setOpenTasksOngoing(true)}\r\n            >\r\n              View\r\n            </td>\r\n          </tr>\r\n          <tr className=\"table__listingItem\">\r\n            <td>Submitted Tasks</td>\r\n            <td\r\n              className=\"button dodgerblue bd\"\r\n              onClick={() => setOpenTasksSubmitted(true)}\r\n            >\r\n              View\r\n            </td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n      {/* child components */}\r\n      {openTasksAvailable && (\r\n        <TasksAvailable\r\n          openTasksAvailable={openTasksAvailable}\r\n          setOpenTasksAvailable={setOpenTasksAvailable}\r\n        />\r\n      )}\r\n      {openTasksOngoing && (\r\n        <TasksOngoing\r\n          openTasksOngoing={openTasksOngoing}\r\n          setOpenTasksOngoing={setOpenTasksOngoing}\r\n        />\r\n      )}\r\n      {openTasksSubmitted && (\r\n        <TasksSubmitted\r\n          openTasksSubmitted={openTasksSubmitted}\r\n          setOpenTasksSubmitted={setOpenTasksSubmitted}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WorkCenter;\r\n","// import installed packages\r\nimport { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\r\n\r\n// import styles\r\nimport \"./App.scss\";\r\n// import material ui items\r\n\r\n// import shared/global items\r\nimport PrivateRoute from \"./shared/PrivateRoute\";\r\n// import components/pages\r\nimport Header from \"./components/common/Header/Header\";\r\n// import Footer from \"./components/common/Footer\";\r\nimport Home from \"./pages/Home/Home\";\r\nimport Sidebar from \"./components/common/Sidebar/Sidebar\";\r\nimport Dashboard from \"./pages/Dashboard/Dashboard\";\r\nimport ActivateAccount from \"./pages/ActivateAccount/ActivateAccount\";\r\nimport ResetPasswordConfirm from \"./pages/ResetPasswordConfirm\";\r\nimport NotFound from \"./pages/NotFound/NotFound\";\r\nimport Profile from \"./pages/Profile/Profile\";\r\nimport MaintainOrganizations from \"./pages/systemAdmin/MaintainOrganizations/MaintainOrganizations\";\r\nimport MaintainTasks from \"./pages/organizationAdmin/Tasks/MaintainTasks\";\r\nimport MaintainWorkers from \"./pages/systemAdmin/MaintainWorkers/MaintainWorkers\";\r\n\r\n// import redux API\r\nimport { get_user } from \"./redux/actions/auth\";\r\nimport WorkCenter from \"./pages/worker/WorkCenter/WorkCenter\";\r\n\r\nfunction App(props) {\r\n  const { profile_type } = props;\r\n  const { getUser } = props;\r\n  const session_cookie = localStorage.getItem(\"session_cookie\");\r\n\r\n  useEffect(() => {\r\n    // get user on page refresh\r\n    if (session_cookie) {\r\n      getUser();\r\n    }\r\n  }, [getUser, session_cookie]);\r\n\r\n  return (\r\n    <div id=\"body-pd\">\r\n      <Router>\r\n        <Header />\r\n        <Sidebar />\r\n        <Routes>\r\n          {/* unauthenticated routes */}\r\n          <Route exact path=\"/\" element={<Home />} />\r\n          <Route\r\n            exact\r\n            path=\"/user/password-reset/:password_token/\"\r\n            element={<ResetPasswordConfirm />}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/user/activate/:activation_token/\"\r\n            element={<ActivateAccount />}\r\n          />\r\n          {/* authenticated routes */}\r\n          <Route exact path=\"/\" element={<PrivateRoute />}>\r\n            {/* SYSTEM ADMIN ROUTES */}\r\n            {profile_type === \"System Admin\" && (\r\n              <>\r\n                <Route\r\n                  exact\r\n                  path=\"/sys-admin/maintain-organizations/\"\r\n                  element={<MaintainOrganizations />}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/sys-admin/maintain-workers/\"\r\n                  element={<MaintainWorkers />}\r\n                />\r\n              </>\r\n            )}\r\n\r\n            {/* ORGANIZATION ADMIN ROUTES */}\r\n            {profile_type === \"Organization Admin\" && (\r\n              <Route\r\n                exact\r\n                path=\"/organization-admin/maintain-tasks/\"\r\n                element={<MaintainTasks />}\r\n              />\r\n            )}\r\n\r\n            {/* END OF SYSTEM ADMIN LINKS */}\r\n            {/* WORKER LINKS */}\r\n            {profile_type === \"Worker\" && (\r\n              <Route\r\n                exact\r\n                path=\"/worker/work-center/\"\r\n                element={<WorkCenter />}\r\n              />\r\n            )}\r\n\r\n            {/* END OF WORKER LINKS */}\r\n            <Route exact path=\"/profile\" element={<Profile />} />\r\n            <Route exact path=\"/dashboard/\" element={<Dashboard />} />\r\n          </Route>\r\n          <Route element={<NotFound />} />\r\n        </Routes>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    profile_type: state.auth.user?.profile_type,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getUser: () => dispatch(get_user()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// types import\r\nimport * as actionTypes from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  signupForm: false,\r\n  loginForm: false,\r\n  loggedIn: false,\r\n  forgotPasswordForm: false,\r\n  resendActivationForm: false,\r\n  resetPasswordConfirmForm: false,\r\n  changePasswordForm: false,\r\n  user: {},\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case actionTypes.OPEN_SIGNUP:\r\n      return {\r\n        ...state,\r\n        signupForm: true,\r\n      };\r\n    case actionTypes.CLOSE_SIGNUP:\r\n      return {\r\n        ...state,\r\n        signupForm: false,\r\n      };\r\n    case actionTypes.OPEN_LOGIN:\r\n      return {\r\n        ...state,\r\n        loginForm: true,\r\n      };\r\n    case actionTypes.CLOSE_LOGIN:\r\n      return {\r\n        ...state,\r\n        loginForm: false,\r\n      };\r\n    case actionTypes.AUTH_SUCCESS:\r\n      return { ...state, user: payload, loggedIn: true };\r\n    case actionTypes.OPEN_FORGOT_PASSWORD:\r\n      return {\r\n        ...state,\r\n        forgotPasswordForm: true,\r\n      };\r\n    case actionTypes.CLOSE_FORGOT_PASSWORD:\r\n      return {\r\n        ...state,\r\n        forgotPasswordForm: false,\r\n      };\r\n    case actionTypes.OPEN_RESEND_ACTIVATION:\r\n      return {\r\n        ...state,\r\n        resendActivationForm: true,\r\n      };\r\n    case actionTypes.CLOSE_RESEND_ACTIVATION:\r\n      return {\r\n        ...state,\r\n        resendActivationForm: false,\r\n      };\r\n    case actionTypes.OPEN_PASSWORD_RESET_CONFIRM:\r\n      return {\r\n        ...state,\r\n        resetPasswordConfirmForm: true,\r\n      };\r\n    case actionTypes.CLOSE_PASSWORD_RESET_CONFIRM:\r\n      return {\r\n        ...state,\r\n        resetPasswordConfirmForm: false,\r\n      };\r\n    case actionTypes.OPEN_CHANGE_PASSWORD:\r\n      return {\r\n        ...state,\r\n        changePasswordForm: true,\r\n      };\r\n    case actionTypes.CLOSE_CHANGE_PASSWORD:\r\n      return {\r\n        ...state,\r\n        changePasswordForm: false,\r\n      };\r\n    case actionTypes.LOGOUT:\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default authReducer;\r\n","import {\r\n  SET_ALERT,\r\n  REMOVE_ALERT,\r\n  START_LOADING,\r\n  STOP_LOADING,\r\n} from \"../actions/types\";\r\n\r\nexport const sharedInitialState = {\r\n  alert: {\r\n    status: false,\r\n    alertType: \"\", // either success or error\r\n    detail: \"\",\r\n  },\r\n  loading: false,\r\n};\r\n\r\nconst sharedReducer = (state = sharedInitialState, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case SET_ALERT:\r\n      return {\r\n        ...state,\r\n        alert: payload,\r\n      };\r\n    case REMOVE_ALERT:\r\n      return {\r\n        ...state,\r\n        alert: payload,\r\n      };\r\n    case START_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case STOP_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default sharedReducer;\r\n","export const updateObject = (oldObject, updatedProperties) => {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedProperties,\r\n  };\r\n};\r\n","import { updateObject } from \"../utility\";\r\nimport * as actionTypes from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  organizations: [],\r\n  organization_tasks: [],\r\n  workers: [],\r\n  workers_applications: [],\r\n};\r\n\r\n// add new organization\r\nconst addOrganization = (state, payload) => {\r\n  return updateObject(state, {\r\n    organizations: [...state.organizations, payload],\r\n  });\r\n};\r\n\r\n// get all organizations\r\nconst getOrganizations = (state, payload) => {\r\n  return updateObject(state, {\r\n    organizations: payload,\r\n  });\r\n};\r\n\r\nconst updateOrganization = (state, payload) => {\r\n  return updateObject(state, {\r\n    organizations: state.organizations.map((organization) =>\r\n      organization.organizationId === payload.organizationId\r\n        ? payload\r\n        : organization\r\n    ),\r\n  });\r\n};\r\n\r\n// organization admin create new task\r\nconst newOrganizationTask = (state, payload) => {\r\n  return updateObject(state, {\r\n    organization_tasks: [...state.organization_tasks, payload],\r\n  });\r\n};\r\n\r\n// organization admin get all tasks\r\nconst getAllTasks = (state, payload) => {\r\n  return updateObject(state, {\r\n    organization_tasks: payload,\r\n  });\r\n};\r\n\r\n// organization admin edit task\r\nconst editOrganizationTask = (state, payload) => {\r\n  return updateObject(state, {\r\n    organization_tasks: state.organization_tasks?.map((task) =>\r\n      task.id === payload.id ? payload : task\r\n    ),\r\n  });\r\n};\r\n\r\n// system admin get all workers\r\nconst getWorkers = (state, payload) => {\r\n  return updateObject(state, {\r\n    workers: payload.workers,\r\n    workers_applications: payload.workers_applications,\r\n  });\r\n};\r\n\r\n// system admin edit worker or application\r\nconst editWorkerOrApplication = (state, payload) => {\r\n  console.log(payload.action_type);\r\n  // edit if worker is being edited\r\n  if (payload.action_type === \"worker\") {\r\n    return updateObject(state, {\r\n      workers: state.workers?.map((worker) =>\r\n        worker.id === payload.id ? payload : worker\r\n      ),\r\n    });\r\n  }\r\n  // edit if worker application is being is being edited\r\n  else if (payload.action_type === \"worker_application\") {\r\n    return updateObject(state, {\r\n      workers_applications: state.workers_applications?.map(\r\n        (worker_application) =>\r\n          worker_application.id === payload.id ? payload : worker_application\r\n      ),\r\n    });\r\n  } else if (payload.action_type === \"worker_and_application\") {\r\n    return updateObject(state, {\r\n      workers_applications: state.workers_applications?.map(\r\n        (worker_application) =>\r\n          worker_application.id === payload.id ? payload : worker_application\r\n      ),\r\n      workers: [...state.workers, payload.worker_data],\r\n    });\r\n  }\r\n};\r\n\r\nconst workReducer = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case actionTypes.ADD_ORGANIZATION:\r\n      return addOrganization(state, payload);\r\n    case actionTypes.GET_ORGANIZATIONS:\r\n      return getOrganizations(state, payload);\r\n    case actionTypes.UPDATE_ORGANIZATION:\r\n      return updateOrganization(state, payload);\r\n    case actionTypes.NEW_ORGANIZATION_TASK:\r\n      return newOrganizationTask(state, payload);\r\n    case actionTypes.GET_TASKS:\r\n      return getAllTasks(state, payload);\r\n    case actionTypes.EDIT_ORGANIZATION_TASK:\r\n      return editOrganizationTask(state, payload);\r\n    case actionTypes.GET_WORKERS:\r\n      return getWorkers(state, payload);\r\n    case actionTypes.EDIT_WORKER:\r\n      return editWorkerOrApplication(state, payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default workReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport auth from \"./auth\";\r\nimport shared from \"./shared\";\r\nimport work from \"./work\";\r\n\r\nexport default combineReducers({\r\n  auth,\r\n  shared,\r\n  work,\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport reducers from \"./reducers\";\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}